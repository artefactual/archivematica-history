/*
# This file is part of Archivematica.
#
# Copyright 2010-2011 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @subpackage MCPServer
# @author Joseph Perry <joseph@artefactual.com>
# @version svn: $Id$
*/

DROP TABLE IF EXISTS Accesses;
CREATE TABLE Accesses (
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    SIPUUID VARCHAR(50),
    resource LONGTEXT,
    status LONGTEXT,
    statusCode TINYINT UNSIGNED,
    exitCode TINYINT UNSIGNED,
    createdTime TIMESTAMP(8) DEFAULT NOW(),
    updatedTime TIMESTAMP(8)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS Agents;
CREATE TABLE Agents (
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    agentIdentifierType     LONGTEXT,
    agentIdentifierValue    LONGTEXT,
    agentName               LONGTEXT,
    agentType               LONGTEXT
) DEFAULT CHARSET=utf8;

set @archivematicaAgent = 1;
set @organizationAgent = 2;
INSERT INTO Agents (pk, agentIdentifierType, agentIdentifierValue, agentName, agentType)
    VALUES (@archivematicaAgent, 'preservation system', 'Archivematica-0.8', 'Archivematica', 'software'),
    (@organizationAgent, 'repository code', 'ORG', 'Your Organization Name Here', 'organization')
;


DROP TABLE IF EXISTS MetadataAppliesToTypes;
CREATE TABLE MetadataAppliesToTypes (
    pk  INT PRIMARY KEY,
    description varchar(50)
) DEFAULT CHARSET=utf8;

set @SIPMetadataAppliesToType = 1;
set @TransferMetadataAppliesToType = 2;
set @FileMetadataAppliesToType = 3;
INSERT INTO MetadataAppliesToTypes (pk, description) 
    VALUES ( @SIPMetadataAppliesToType, 'SIP'),
    ( @FileMetadataAppliesToType, 'File'),
    ( @TransferMetadataAppliesToType, 'Transfer' )
;


DROP TABLE IF EXISTS Dublincore;
CREATE TABLE Dublincore (
    pk              INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    metadataAppliesToType  INT,
    Foreign Key (metadataAppliesToType) references MetadataAppliesToTypes(pk),
    metadataAppliesToidentifier      VARCHAR(50),
    title           LONGTEXT,
    creator         LONGTEXT,
    subject         LONGTEXT,
    description     LONGTEXT,
    publisher       LONGTEXT,
    contributor     LONGTEXT,
    date            LONGTEXT,
    type            LONGTEXT,
    format          LONGTEXT,
    identifier      LONGTEXT,
    source          LONGTEXT,
    isPartOf        LONGTEXT,
    language        LONGTEXT,
    coverage        LONGTEXT,
    rights          LONGTEXT
) DEFAULT CHARSET=utf8;


-- rightsStatement (O, R)
DROP TABLE IF EXISTS RightsStatement;
CREATE TABLE RightsStatement ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    metadataAppliesToType  INT,
    Foreign Key (metadataAppliesToType) references MetadataAppliesToTypes(pk),
    metadataAppliesToidentifier      VARCHAR(50),
    rightsStatementIdentifier LONGTEXT NOT NULL,
    rightsStatementIdentifierType LONGTEXT NOT NULL,
    rightsStatementIdentifierValue LONGTEXT NOT NULL,
    fkAgent int(10) UNSIGNED DEFAULT 0 NOT NULL,
    rightsNotes LONGTEXT NOT NULL,
    rightsBasis LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;
ALTER TABLE RightsStatement ADD INDEX fkAgent (fkAgent);

DROP TABLE IF EXISTS RightsStatementCopyright;
CREATE TABLE RightsStatementCopyright(
  pk INT(10) unsigned NOT NULL AUTO_INCREMENT,
  fkRightsStatement INT(10) unsigned DEFAULT NULL,
  copyrightStatus LONGTEXT NOT NULL,
  copyrightJurisdiction LONGTEXT NOT NULL,
  copyrightStatusDeterminationDate LONGTEXT NOT NULL,
  PRIMARY KEY (pk),
  KEY fkRightsStatement (fkRightsStatement)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS RightsStatementLicense;
CREATE TABLE RightsStatementLicense(
  pk INT(10) unsigned NOT NULL AUTO_INCREMENT,
  fkRightsStatement INT(10) unsigned DEFAULT NULL,
  licenseIdentifier longtext,
  licenseTerms longtext,
  PRIMARY KEY (pk),
  KEY fkRightsStatement (fkRightsStatement)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS ArchivematicaRightsStatement;
CREATE TABLE ArchivematicaRightsStatement (
    pk              INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    metadataAppliesToType  INT,
    Foreign Key (metadataAppliesToType) references MetadataAppliesToTypes(pk),
    metadataAppliesToidentifier      VARCHAR(50),
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk)
) DEFAULT CHARSET=utf8;

-- rightsExtension (O, R) ??? --

-- 4.1.3.4 copyrightNote (O, R)
DROP TABLE IF EXISTS RightsStatementCopyrightNote;
CREATE TABLE RightsStatementCopyrightNote ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk),
    copyrightNote LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;

-- 4.1.4.3 licenseNote (O, R)
DROP TABLE IF EXISTS RightsStatementLicenseNote;
CREATE TABLE RightsStatementLicenseNote ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk),
    licenseNote LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;


-- 4.1.5 statuteInformation (O, R)
DROP TABLE IF EXISTS RightsStatementStatuteInformation;
CREATE TABLE RightsStatementStatuteInformation ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk),
    statuteJurisdiction LONGTEXT NOT NULL,
    statuteCitation LONGTEXT NOT NULL,
    statuteInformationDeterminationDate LONGTEXT

) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS RightsStatementStatuteInformationNote;
CREATE TABLE RightsStatementStatuteInformationNote (
  pk int(10) unsigned NOT NULL AUTO_INCREMENT,
  fkRightsStatement int(10) unsigned DEFAULT NULL,
  statuteNote longtext NOT NULL,
  PRIMARY KEY (pk),
  KEY fkRightsStatement (fkRightsStatement)
) DEFAULT CHARSET=utf8;

/*
USING - ArchivematicaRightsStatement TABLE
-- 4.1.7 linkingObjectIdentifier (O, R)
DROP TABLE IF EXISTS RightsStatementLinkingObjectIdentifier;
CREATE TABLE RightsStatementLinkingObjectIdentifier ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk),
    linkingObjectIdentifierType LONGTEXT NOT NULL,
    linkingObjectIdentifierValue LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;

-- 4.1.7.? LinkingObjectRole (O, R)
DROP TABLE IF EXISTS RightsStatementLinkingObjectIdentifierLinkingObjectRole;
CREATE TABLE RightsStatementLinkingObjectIdentifierLinkingObjectRole ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatementLinkingObjectIdentifier INT UNSIGNED,
    Foreign Key (fkRightsStatementLinkingObjectIdentifier) references RightsStatementLinkingObjectIdentifier(pk),
    LinkingObjectRole LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;
*/

-- 4.1.6 rightsGranted (O, R)
DROP TABLE IF EXISTS RightsStatementRightsGranted;
CREATE TABLE RightsStatementRightsGranted ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk),
    act LONGTEXT NOT NULL,
    startDate LONGTEXT NOT NULL,
    endDate LONGTEXT,
    restriction LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;

-- 4.1.6.2 restriction (O, R)
DROP TABLE IF EXISTS RightsStatementRightsGrantedRestriction;
CREATE TABLE RightsStatementRightsGrantedRestriction ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatementRightsGranted INT UNSIGNED,
    Foreign Key (fkRightsStatementRightsGranted) references RightsStatementRightsGranted(pk),
    restriction LONGTEXT
) DEFAULT CHARSET=utf8;
-- 4.1.6.4 rightsGrantedNote (O, R)
DROP TABLE IF EXISTS RightsStatementRightsGrantedRestriction;
CREATE TABLE RightsStatementRightsGrantedRestriction ( 
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatementRightsGranted INT UNSIGNED,
    Foreign Key (fkRightsStatementRightsGranted) references RightsStatementRightsGranted(pk),
    rightsGrantedNote LONGTEXT 
) DEFAULT CHARSET=utf8;

-- 4.1.8 linkingAgentIdentifier (O, R)
DROP TABLE IF EXISTS RightsStatementLinkingAgentIdentifier;
CREATE TABLE RightsStatementLinkingAgentIdentifier (
    pk INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fkRightsStatement INT UNSIGNED,
    Foreign Key (fkRightsStatement) references RightsStatement(pk),
    linkingAgentIdentifierType LONGTEXT NOT NULL,
    linkingAgentIdentifierValue LONGTEXT NOT NULL
) DEFAULT CHARSET=utf8;

/*
Entity semantic units
4.1
rightsStatement (O, R)
4.1.1 rightsStatementIdentifier (M, NR)
4.1.1.1 rightsStatementIdentifierType (M, NR)
4.1.1.2 rightsStatementIdentifierValue (M, NR)
4.1.2 rightsBasis (M, NR)
4.1.3 copyrightInformation (O, NR)
4.1.3.1 copyrightStatus (M, NR)
4.1.3.2 copyrightJurisdiction (M, NR)
4.1.3.3 copyrightStatusDeterminationDate (O, NR)
4.1.3.4 copyrightNote (O, R)
4.1.4 licenseInformation (O, NR)
4.1.4.1 licenseIdentifier (O, NR)
4.1.4.1.1 licenseIdentifierType (M, NR)
4.1.4.1.2 licenseIdentifierValue (M, NR)
4.1.4.2 licenseTerms (O, NR)
4.1.4.3 licenseNote (O, R)
4.1.5 statuteInformation (O, R)
4.1.5.1 statuteJurisdiction (M, NR)
Data Dictionary for Preservation Metadata: PREMIS version 2.1
165
THE PREMIS DATA DICTIONARY
4.2
166
4.1.5.2 statuteCitation (M, NR)
4.1.5.3 statuteInformationDeterminationDate (O, NR)
4.1.5.4 statuteNote (O, R)
4.1.6 rightsGranted (O, R)
4.1.6.1 act (M, NR)
4.1.6.2 restriction (O, R)
4.1.6.3 termOfGrant (M, NR)
4.1.6.3.1 startDate (M, NR)
4.1.6.3.2 endDate (O, NR)
4.1.6.4 rightsGrantedNote (O, R)
4.1.7 linkingObjectIdentifier (O, R)
4.1.7.1 linkingObjectIdentifierType (M, NR)
4.1.7.2 linkingObjectIdentifierValue (M, NR)
4.1.7.3 linkingObjectRole (O, R)
4.1.8 linkingAgentIdentifier (O, R)
4.1.8.1 linkingAgentIdentifierType (M, NR)
4.1.8.2 linkingAgentIdentifierValue (M, NR)
4.1.8.3 linkingAgentRole (O, R)
rightsExtension (O, R)




<premis>
  <rights>
    <rightsStatement>
      <rightsStatementIdentifier>
        <rightsStatementIdentiferType>UUID</rightsStatementIdentiferType>
        <rightsStatementIdentifierValue>14cbad80-70nd-4f46-887f-k1gv7f9f30h6</rightsStatementIdentifierValue>
      </rightsStatementIdentifier>
      <rightsBasis>License</rightsBasis>
      <copyrightInformation>
        <copyrightStatus></copyrightStatus>
        <copyrightJurisdiction></copyrightJurisdiction>
        <copyrightStatusDeterminationDate></copyrightStatusDeterminationDate>
        <copyrightNote></copyrightNote>
      </copyrightInformation>
      <licenseInformation>
        <licenseIdentifier>
          <licenseIdentifierType>UUID</licenseIdentifierType>
          <licenseIdentifierValue>d3e828fb-e6f1-40b6-a3c5-839773b35755</licenseIdentifierValue>
        </licenseIdentifier>
        <licenseTerms>This file is licensed under the Creative Commons Attribution-Share Alike 3.0 Unported license</licenseTerms>
        <licenseNote></licenseNote> 
      </licenseInformation>
      <statuteInformation>
        <statuteJurisdiction></statuteJurisdiction>
        <statuteCitation></statuteCitation>
        <statuteInformationDeterminationDate></statuteInformationDeterminationDate>
        <statuteNote></statuteNote>
      </statuteInformation>
      <rightsGranted>
        <act>Disseminate</act>
        <restriction>Allow</restriction>
        <termOfGrant>
          <startDate>2011-09-16</startDate>
          <endDate>open</endDate>
        </termOfGrant>
        <rightsGrantedNote>Attribution required</rightsGrantedNote>
      </rightsGranted>
        <linkingObjectIdentifier>
        <linkingObjectIdentifierType>UUID</linkingObjectIdentifierType>
        <linkingObjectIdentifierValue>52cbad80-70fd-4f46-887f-a1be7f9f30e0</linkingObjectIdentifierValue>
      </linkingObjectIdentifier>
      <linkingAgentIdentifier> *Repeatable
        <linkingAgentIdentifierType></linkingAgentIdentifierType>
        <linkingAgentIdentifierValue></linkingAgentIdentifierValue>
        <linkingAgentRole></linkingAgentRole>
      </linkingAgentIdentifier>
    </rightsStatement>
  </rights>
</premis>
*/



-- clear && sudo mysql --execute="source ./mysql" MCP --
DROP TABLE IF EXISTS Transfers;
CREATE TABLE Transfers (
    transferUUID        VARCHAR(50) PRIMARY KEY,
    currentLocation     LONGTEXT,
    magicLink           BIGINT,
    magicLinkExitMessage VARCHAR(50) DEFAULT 'Completed successfully',
    type                VARCHAR(50),
    accessionID         LONGTEXT,
    sourceOfAcquisition LONGTEXT,
    typeOfTransfer      LONGTEXT,
    description         LONGTEXT,
    notes               LONGTEXT,
    hidden              BOOLEAN NOT NULL DEFAULT 0
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS Tasks;
CREATE TABLE Tasks (
    taskUUID        VARCHAR(50) PRIMARY KEY,
    jobUUID         VARCHAR(50),
    createdTime     TIMESTAMP(8) DEFAULT NOW(),
    fileUUID        VARCHAR(50),
    fileName        VARCHAR(100),
    exec            VARCHAR(50),
    arguments       VARCHAR(1000),
    startTime       TIMESTAMP(8),
    client          VARCHAR(50),
    endTime         TIMESTAMP(8),
    stdOut          LONGTEXT,
    stdError        LONGTEXT,
    exitCode        BIGINT
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS Jobs;
CREATE TABLE Jobs (
    jobUUID         VARCHAR(50) PRIMARY KEY,
    jobType         VARCHAR(250),
    createdTime     TIMESTAMP(8) DEFAULT NOW(),
    createdTimeDec  decimal(24,10) NOT NULL DEFAULT 0,
    directory       VARCHAR(250),
    SIPUUID         VARCHAR(50),
    unitType        VARCHAR(50),
    currentStep     VARCHAR(50),
    microserviceGroup VARCHAR(50),
    hidden          BOOLEAN NOT NULL DEFAULT 0
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS jobStepCompleted;
CREATE TABLE jobStepCompleted (
    pk              BIGINT PRIMARY KEY AUTO_INCREMENT,
    jobUUID         VARCHAR(50),
    completedTime   TIMESTAMP(8) DEFAULT NOW(),
    step            VARCHAR(50)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS SIPs;
CREATE TABLE SIPs (
    sipUUID         VARCHAR(50) PRIMARY KEY,
    createdTime     TIMESTAMP(8) DEFAULT NOW(),
    currentPath     LONGTEXT,
    magicLink       BIGINT,
    magicLinkExitMessage VARCHAR(50) DEFAULT 'Completed successfully',
    hidden          BOOLEAN NOT NULL DEFAULT 0
) DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS Files;
CREATE TABLE Files(
    fileUUID            VARCHAR(50) PRIMARY KEY,
    originalLocation   LONGTEXT,
    currentLocation     LONGTEXT,
    sipUUID             VARCHAR(50),
    Foreign Key (sipUUID) references SIPs(sipUUID),
    transferUUID        VARCHAR(50),
    Foreign Key (transferUUID) references Transfers(transferUUID),
    removedTime         TIMESTAMP(8) DEFAULT 0,
    enteredSystem       TIMESTAMP(8) DEFAULT NOW(),
    fileSize            BIGINT UNSIGNED, 
    checksum            VARCHAR(100),
    fileGrpUse                VARCHAR(50) DEFAULT 'Original'
) DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS FilesFits;
CREATE TABLE FilesFits(
    fileUUID   VARCHAR(50) PRIMARY KEY,
    Foreign Key (fileUUID) references Files(fileUUID),
    FITSxml    LONGTEXT
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS FilesIDs;
CREATE TABLE FilesIDs(
    pk              INT PRIMARY KEY AUTO_INCREMENT,
    fileUUID        VARCHAR(50),
    Foreign Key (fileUUID) references Files(fileUUID),
    formatName      LONGTEXT,
    formatVersion   LONGTEXT,
    formatRegistryName  LONGTEXT,
    formatRegistryKey   LONGTEXT
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS Events;
CREATE TABLE Events(
    pk                  BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fileUUID            VARCHAR(50),
    Foreign Key (fileUUID) references Files(fileUUID),
    eventIdentifierUUID VARCHAR(50),
    eventType           LONGTEXT,
    eventDateTime       TIMESTAMP(8),
    eventDetail         LONGTEXT,
    eventOutcome        LONGTEXT,
    eventOutcomeDetailNote  LONGTEXT,
    linkingAgentIdentifier  INT,
    Foreign Key (linkingAgentIdentifier) references linkingAgentIdentifiers(pk)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS Derivations;
CREATE TABLE Derivations (
    pk               BIGINT PRIMARY KEY AUTO_INCREMENT,
    sourceFileUUID   VARCHAR(50),
    Foreign Key (sourceFileUUID) references Files(fileUUID),
    derivedFileUUID  VARCHAR(50),
    Foreign Key (derivedFileUUID) references Files(fileUUID),
    relatedEventUUID VARCHAR(50)
) DEFAULT CHARSET=utf8;



DROP TABLE IF EXISTS Sounds;
CREATE TABLE Sounds(
    pk  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    description        LONGTEXT,
    fileLocation       LONGTEXT
) DEFAULT CHARSET=utf8;

set @errorSound = 1;
set @alertSound = 2;
set @requiresApprovalSound = 3;

INSERT INTO Sounds
    (pk, description, fileLocation) 
    VALUES ( @errorSound, 'Error', '/usr/share/sounds/KDE-Im-Error-On-Connection.ogg'),
    ( @alertSound, 'Alert', '/usr/share/sounds/KDE-Im-Irc-Event.ogg'),
    ( @requiresApprovalSound, 'Requires approval', '/usr/share/sounds/KDE-Sys-List-End.ogg');




DROP TABLE IF EXISTS MicroServiceChainLinks;
CREATE TABLE MicroServiceChainLinks (
    pk  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    currentTask                 INT UNSIGNED,
    Foreign Key (currentTask) references TasksConfigs(pk),            
    defaultNextChainLink        INT UNSIGNED DEFAULT 1,   
    Foreign Key (defaultNextChainLink) references MicroServiceChainLinks(pk),    
    defaultPlaySound   INT,
    Foreign Key (defaultPlaySound) references Sounds(pk),    
    microserviceGroup VARCHAR(50),
    reloadFileList      BOOLEAN DEFAULT TRUE,
    defaultExitMessage  VARCHAR(50) DEFAULT 'Failed'
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS MicroServiceChainLinksExitCodes;
CREATE TABLE MicroServiceChainLinksExitCodes (
    pk  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    microServiceChainLink   INT UNSIGNED,
    Foreign Key (microServiceChainLink) references MicroServiceChainLinks(pk),
    exitCode    INT DEFAULT 0,
    nextMicroServiceChainLink   INT UNSIGNED,
    Foreign Key (nextMicroServiceChainLink) references MicroServiceChainLinks(pk),
    playSound   INT,
    Foreign Key (playSound) references Sounds(pk),
    exitMessage  VARCHAR(50) DEFAULT 'Completed successfully'
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS MicroServiceChains;
CREATE TABLE MicroServiceChains (
    pk              INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, 
    startingLink    INT UNSIGNED,
    Foreign Key (startingLink) references MicroServiceChainLinks(pk),           
    description     LONGTEXT
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS TaskTypes;
CREATE TABLE TaskTypes (
    pk                 INT UNSIGNED,
    description        LONGTEXT
) DEFAULT CHARSET=utf8;

INSERT INTO TaskTypes
    (pk, description) 
    VALUES ( 0, 'one instance'),
    ( 1, 'for each file'),
    ( 2, 'get user choice to proceed with'),
    ( 3, 'assign magic link'),
    ( 4, 'goto magic link');

DROP TABLE IF EXISTS TasksConfigs;
CREATE TABLE TasksConfigs (
    pk                  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    taskType            INT UNSIGNED,
    Foreign Key (taskType) references TaskTypes(pk),
    taskTypePKReference INT UNSIGNED,
    description         LONGTEXT
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS StandardTasksConfigs;
CREATE TABLE StandardTasksConfigs (
    pk                  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    filterFileEnd       VARCHAR(50),
    filterFileStart     VARCHAR(50),
    filterSubDir        VARCHAR(50),
    requiresOutputLock  BOOLEAN,
    standardOutputFile  VARCHAR(250),
    standardErrorFile   VARCHAR(250),
    execute             VARCHAR(50),
    arguments           LONGTEXT
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS MicroServiceChainChoice;
CREATE TABLE MicroServiceChainChoice (
    pk                      INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    choiceAvailableAtLink   INT UNSIGNED,
    Foreign Key (choiceAvailableAtLink) references MicroServiceChainLinks(pk),
    chainAvailable          INT UNSIGNED,
    Foreign Key (chainAvailable) references MicroServiceChains(pk)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS WatchedDirectoriesExpectedTypes;
CREATE TABLE WatchedDirectoriesExpectedTypes (
    pk                      INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    description             LONGTEXT
) DEFAULT CHARSET=utf8;

SET @expectedTypeSIP = 1;
SET @expectedTypeDIP = 2;
SET @expectedTypeTransfer = 3;
INSERT INTO WatchedDirectoriesExpectedTypes(pk, description) 
    VALUES ( @expectedTypeSIP, 'SIP'),
    ( @expectedTypeDIP, 'DIP'),
    ( @expectedTypeTransfer, 'Transfer');

DROP TABLE IF EXISTS WatchedDirectories;
CREATE TABLE WatchedDirectories (
    pk                      INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    watchedDirectoryPath    LONGTEXT,
    chain                   INT UNSIGNED,
    Foreign Key (chain) references MicroServiceChains(pk),
    onlyActOnDirectories    BOOLEAN DEFAULT TRUE,
    expectedType            INT DEFAULT 1,
    Foreign Key (expectedType) references WatchedDirectoriesExpectedTypes(pk)
) DEFAULT CHARSET=utf8;


-- Move To Failed Directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%failed/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the failed directory');

INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink, defaultPlaySound) 
    VALUES (LAST_INSERT_ID(), NULL, @errorSound); 
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @defaultNextChainLink = @MicroServiceChainLink;

-- Move to processing directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%processingDirectory%." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to processing directory');
set @moveToProcessingDirectoryTaskConfig = LAST_INSERT_ID();;


-- Set file permissions --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setDirectoryPermissionsForAppraisal_v0.0', '"%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set file permissions');
set @setFilePermissionsTaskConfig = LAST_INSERT_ID();


-- Reject SIP --
SET @microserviceGroup  = 'Reject SIP';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%rejectedDirectory%." "%SIPUUID%" "%sharedPath%"');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the rejected directory');

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL); 
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Reject SIP');
set @rejectSIPMicroServiceChain = LAST_INSERT_ID();

-- <uploadDIP> --
SET @microserviceGroup  = 'Upload DIP';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'move_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%uploadedDIPs/."');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the uploadedDIPs directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL); 
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'upload-qubit_v0.0', '--url="http://localhost/ica-atom/index.php/sword/deposit/archivematica" --email="demo@example.com" --password="demo" --UUID="%SIPUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'uploadDIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- disabled, because it uses the SIP uuid and updates the SIP/AIP directory location with that of the DIP --
/*
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
*/

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Upload DIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'uploadDIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'uploadDIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%uploadDIP/', @MicroServiceChain, @expectedTypeDIP);

-- </uploadDIP> --

-- Store AIP --
SET @microserviceGroup  = 'Store AIP';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'remove_v0.0', '-R "%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Remove the processing directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'storeAIP_v0.0', '"%AIPsStore%" "%SIPDirectory%%SIPName%-%SIPUUID%.7z" "%SIPUUID%" "%sharedPath%www/index.html" "%SIPName%" "%date%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Store the AIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Store AIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Store AIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'storeAIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%storeAIP/', @MicroServiceChain);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/storeAIP/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to the store AIP approval directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
-- --
SET @microserviceGroup  = 'Prepare AIP';

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'remove_v0.0', '-R "%SIPDirectory%%SIPName%-%SIPUUID%" "%SIPDirectory%METS.%SIPUUID%.xml" "%SIPDirectory%metadata/" "%SIPLogsDirectory%" "%SIPObjectsDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Removed bagged files.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setFilePermission_v0.0', '775 "%SIPDirectory%%SIPName%-%SIPUUID%.7z"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set bag file permissions');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- Also modify extraction command in store AIP
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '7z_v0.0', 'a -bd -t7z -y -m0=%AIPCompressionAlgorithm% -mx=%AIPCompressionLevel% "%SIPDirectory%%SIPName%-%SIPUUID%.7z" "%SIPDirectory%%SIPName%-%SIPUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Compress AIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @PrepareAIPMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'bagit_v0.0', 'create "%SIPDirectory%%SIPName%-%SIPUUID%" "%SIPLogsDirectory%" "%SIPObjectsDirectory%" "%SIPDirectory%METS.%SIPUUID%.xml" "%SIPDirectory%metadata/" --writer filesystem --payloadmanifestalgorithm "sha512"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Prepare AIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @PrepareAIPMicroServiceChainLink = @MicroServiceChainLink;

-- GENERATE AIP AND DIP --
SET @microserviceGroup  = 'Prepare DIP';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'move_v0.0', '"%SIPDirectory%DIP" "%sharedPath%watchedDirectories/uploadDIP/%SIPDirectoryBasename%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Generate DIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copy_v0.0', '"%SIPDirectory%METS.%SIPUUID%.xml" "%SIPDirectory%DIP/METS.%SIPUUID%.xml"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Copy METS to DIP directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Prepare AIP';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copyTransfersMetadataAndLogs_v0.0', '--sipDirectory "%SIPDirectory%" --sipUUID "%SIPUUID%" --sharedPath "%sharedPath%"');
SET @CopyTransfersmetadataandlogsTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @CopyTransfersmetadataandlogsTask, 'Copy Transfers metadata and logs');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(),  @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createMETS_v2.0', '--amdSec --baseDirectoryPath "%SIPDirectory%" --baseDirectoryPathString "SIPDirectory" --fileGroupIdentifier "%SIPUUID%" --fileGroupType "sipUUID" --xmlFile "%SIPDirectory%METS.%SIPUUID%.xml"');
SET @GenerateMETSxmldocumentTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @GenerateMETSxmldocumentTask, 'Generate METS.xml document');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'removeEmptyDirectories_v0.0', '"%SIPDirectory%"');
SET @RemoveEmptyDirectoriesTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @RemoveEmptyDirectoriesTask, 'Remove empty directories');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/', FALSE, NULL, NULL, 'verifyPREMISChecksums_v0.0', '--fileUUID "%fileUUID%" --filePath "%relativeLocation%" --date "%date%" --eventIdentifierUUID "%taskUUID%"');
SET @VerifychecksumsgeneratedoningestTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @VerifychecksumsgeneratedoningestTask, 'Verify checksums generated on ingest');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/', FALSE, '%SIPLogsDirectory%removedFilesWithNoPremisMetadata.log', '%SIPLogsDirectory%removedFilesWithNoPremisMetadata.log', 'removeFilesWithoutPresmisMetadata_v0.0', '--fileUUID "%fileUUID%" --inputFile "%relativeLocation%" --sipDirectory "%SIPDirectory%"');
SET @RemovefileswithoutlinkinginformationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @RemovefileswithoutlinkinginformationTask, 'Remove files without linking information (failed normalization artifacts etc.)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Process submission documentation';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizePreservation_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "preservation" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --sipUUID "%SIPUUID%" --sipPath "%SIPDirectory%" --fileGrpUse "%fileGrpUse%"');
SET @NormalizesubmissiondocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @NormalizesubmissiondocumentationTask, 'Normalize submission documentation to preservation format');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', FALSE, NULL, NULL, 'FITS_v0.0', '"%relativeLocation%" "%SIPLogsDirectory%fileMeta/%fileUUID%.xml" "%date%" "%taskUUID%" "%fileUUID%" "%fileGrpUse%"');
SET @CharacterizeandextractsubmissiondocumentationmetadataTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @CharacterizeandextractsubmissiondocumentationmetadataTask, 'Characterize and extract metadata on submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, NULL, '%SIPLogsDirectory%clamAVScan.txt', 'archivematicaClamscan_v0.0', '"%fileUUID%" "%relativeLocation%" "%date%" "%taskUUID%"');
SET @ScanforvirusesinsubmissiondocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ScanforvirusesinsubmissiondocumentationTask, 'Scan for viruses in submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;




INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', FALSE, '%SIPLogsDirectory%filenameCleanup.log', '%SIPLogsDirectory%filenameCleanup.log', 'sanitizeObjectNames_v0.0', '"%SIPObjectsDirectory%" "%SIPUUID%" "%date%" "%taskUUID%" "SIPDirectory" "sipUUID"');
SET @SanitizefileanddirectorynamesinsubmissiondocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @SanitizefileanddirectorynamesinsubmissiondocumentationTask, 'Sanitize file and directory names in submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, '%SIPLogsDirectory%extraction.log', '%SIPLogsDirectory%extraction.log', 'transcoderExtractPackages_v0.0', '"%relativeLocation%" "%SIPObjectsDirectory%" "%SIPLogsDirectory%" "%date%" "%taskUUID%" "%fileUUID%"');
SET @ExtractpackagesinsubmissiondocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ExtractpackagesinsubmissiondocumentationTask, 'Extract packages in submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', FALSE, NULL, NULL, 'updateSizeAndChecksum_v0.0',  '--filePath "%relativeLocation%" --fileUUID "%fileUUID%" --eventIdentifierUUID "%taskUUID%" --date "%date%"');
SET @AssignchecksumsandfilesizestosubmissiondocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignchecksumsandfilesizestosubmissiondocumentationTask, 'Assign checksums and file sizes to submissionDocumentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, '%SIPLogsDirectory%FileUUIDs.log', '%SIPLogsDirectory%FileUUIDsError.log', 'assignFileUUIDs_v0.0',  '--sipUUID "%SIPUUID%" --sipDirectory "%SIPDirectory%" --filePath "%relativeLocation%" --fileUUID "%fileUUID%" --eventIdentifierUUID "%taskUUID%" --date "%date%" --use "submissionDocumentation"');
SET @AssignfileUUIDstosubmissiondocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignfileUUIDstosubmissiondocumentationTask, 'Assign file UUIDs to submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'move_v0.0', '"%SIPDirectory%metadata/submissionDocumentation" "%SIPDirectory%objects/submissionDocumentation"');
SET @MoveSubmissionDocumentationintoobjectsdirectoryTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MoveSubmissionDocumentationintoobjectsdirectoryTask, 'Move Submission Documentation into objects directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'checkForSubmissionDocumenation_v0.0', '"%SIPDirectory%metadata/submissionDocumentation"');
SET @CheckForSubmissionDocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @CheckForSubmissionDocumentationTask, 'Check for submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copyTransferSubmissionDocumentation_v0.0', '"%SIPUUID%" "%SIPDirectory%metadata/submissionDocumentation" "%sharedPath%"');
SET @MoveTransferSubmissionDocumentationTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MoveTransferSubmissionDocumentationTask, 'Copy Transfer Submission Documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'no normalization'); -- No normalization for sip with access directory --
set @noNormalizationWithAccessDirectoryMicroServiceChain = LAST_INSERT_ID();


INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Approve normalization');
set @MicroServiceChain = LAST_INSERT_ID();

SET @microserviceGroup  = 'Normalize';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Approve normalization');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'approveNormalization');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%approveNormalization/preservationAndAccess/', @MicroServiceChain);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/approveNormalization/preservationAndAccess/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to approve normalization directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @FinishedNormalizationWithDIPMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'manual normalization'); -- Manual normalization for sip with access directory --
set @manualNormalizationWithAccessDirectoryMicroServiceChain = LAST_INSERT_ID();

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @RemovefileswithoutlinkinginformationTask, 'Remove files without linking information (failed normalization artifacts etc.)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizePreservation_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "preservation" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --sipUUID "%SIPUUID%" --sipPath "%SIPDirectory%" --fileGrpUse "%fileGrpUse%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Normalize preservation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink2 = @MicroServiceChainLink;

-- Set file permissions
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink2);
set @NextMicroServiceChainLink2 = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'preservation'); -- preservation normalization for sip with access directory --
set @normalizePreservationWithAccessDirectoryMicroServiceChain = LAST_INSERT_ID();

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @RemovefileswithoutlinkinginformationTask, 'Remove files without linking information (failed normalization artifacts etc.)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizeAccess_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "access" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --excludeDirectory "%SIPObjectsDirectory%submissionDocumentation/" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --accessDirectory "%SIPDirectory%DIP/objects/" --fileGrpUse "%fileGrpUse%"');
SET @normalizeAccessTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @normalizeAccessTask, 'Normalize access');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createDirectory_v0.0', '-m 770 "%SIPDirectory%DIP/" "%SIPDirectory%DIP/objects/"');
SET @createDIPDirectoryTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @createDIPDirectoryTask, 'Create DIP directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'preservation and access');
set @CreateDIPandAIPMicroServiceChain = LAST_INSERT_ID();
-- /CREATE AIP AND DIP --

-- CREATE AIP AND DIP - Access normalization only --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizeAccess_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "access" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --excludeDirectory "%SIPObjectsDirectory%submissionDocumentation/" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --accessDirectory "%SIPDirectory%DIP/objects/"');
SET @normalizeAccessTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @normalizeAccessTask, 'Normalize access');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @FinishedNormalizationWithDIPMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @FinishedNormalizationWithDIPMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createDirectory_v0.0', '-m 770 "%SIPDirectory%DIP/" "%SIPDirectory%DIP/objects/"');
SET @createDIPDirectoryTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @createDIPDirectoryTask, 'Create DIP directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'access only');
set @normalizeAccessOnlyMicroServiceChain = LAST_INSERT_ID();
-- CREATE AIP AND DIP - Access normalization only --

-- GENERATE AIP --

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @PrepareAIPMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @CopyTransfersmetadataandlogsTask, 'Copy Transfers metadata and logs');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(),  @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @GenerateMETSxmldocumentTask, 'Generate METS.xml document');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @RemoveEmptyDirectoriesTask, 'Remove empty directories');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @VerifychecksumsgeneratedoningestTask, 'Verify checksums generated on ingest');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @RemovefileswithoutlinkinginformationTask, 'Remove files without linking information (failed normalization artifacts etc.)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Process submission documentation';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @NormalizesubmissiondocumentationTask, 'Normalize submission documentation to preservation format');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @CharacterizeandextractsubmissiondocumentationmetadataTask, 'Characterize and extract metadata on submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ScanforvirusesinsubmissiondocumentationTask, 'Scan for viruses in submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @SanitizefileanddirectorynamesinsubmissiondocumentationTask, 'Sanitize file and directory names in submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ExtractpackagesinsubmissiondocumentationTask, 'Extract packages in submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignchecksumsandfilesizestosubmissiondocumentationTask, 'Assign checksums and file sizes to submissionDocumentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignfileUUIDstosubmissiondocumentationTask, 'Assign file UUIDs to submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MoveSubmissionDocumentationintoobjectsdirectoryTask, 'Move Submission Documentation into objects directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @CheckForSubmissionDocumentationTask, 'Check for submission documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MoveTransferSubmissionDocumentationTask, 'Copy Transfer Submission Documentation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Approve normalization');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'no normalization');
set @ProcessSubmissionDocumentationLinkMicroServiceChain = LAST_INSERT_ID();

SET @microserviceGroup  = 'Normalize';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Approve normalization');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'approveNormalization');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%approveNormalization/preservation/', @MicroServiceChain);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/approveNormalization/preservation/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to approve normalization directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'manual normalization');
set @ManualNormalizationMicroServiceChain = LAST_INSERT_ID();

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizePreservation_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "preservation" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --sipUUID "%SIPUUID%" --sipPath "%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Normalize preservation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink2 = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'preservation only');
set @CreateAIPMicroServiceChain = LAST_INSERT_ID();
-- /CREATE AIP --





INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Normalize');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @CreateAIPMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @normalizeAccessOnlyMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @CreateDIPandAIPMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @ProcessSubmissionDocumentationLinkMicroServiceChain); -- no normalization --
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @ManualNormalizationMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @normalizeOptionsForASIPWITHOUTAccessDirectory = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Normalize');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @noNormalizationWithAccessDirectoryMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @manualNormalizationWithAccessDirectoryMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @normalizePreservationWithAccessDirectoryMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @normalizeOptionsForASIPWITHAccessDirectory = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, NULL, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (4,      LAST_INSERT_ID(), 'Find options to normalize as');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();



INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Create DIP ?');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%workFlowDecisions/createDip/', @MicroServiceChain);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/workFlowDecisions/createDip/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to workFlowDecisions-createDip directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @normalizeOptionsForASIPWITHOUTAccessDirectory, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Grant normalization options for no pre-existing DIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NoDIPNextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @normalizeOptionsForASIPWITHAccessDirectory, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Grant normalization options for pre-existing DIP');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @ADIPNextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'checkForAccessDirectory_v0.0', '--SIPDirectory "%SIPDirectory%" --accessDirectory "objects/access/" --objectsDirectory "objects/" --DIPDirectory "DIP" --SIPUUID "%SIPUUID%" --date "%date%" -c');
SET @checkForAccessDirectoryCopyToDIPTask = LAST_INSERT_ID();
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'checkForAccessDirectory_v0.0', '--SIPDirectory "%SIPDirectory%" --accessDirectory "objects/access/" --objectsDirectory "objects/" --DIPDirectory "DIP" --SIPUUID "%SIPUUID%" --date "%date%"' );
SET @checkForAccessDirectoryMoveToDIPTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @checkForAccessDirectoryMoveToDIPTask, 'Check for Access directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NoDIPNextMicroServiceChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 179, @ADIPNextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'checkForServiceDirectory_v0.0', '--SIPDirectory "%SIPDirectory%" --serviceDirectory "objects/service/" --objectsDirectory "objects/" --SIPUUID "%SIPUUID%" --date "%date%"' );
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,     LAST_INSERT_ID(), 'Check for Service directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Clean up names';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, '%SIPDirectory%SIPnameCleanup.log', 'sanitizeSIPName_v0.0', '"%relativeLocation%" "%SIPUUID%" "%date%" "%sharedPath%"');    
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize SIP name');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%filenameCleanup.log', '%SIPLogsDirectory%filenameCleanup.log', 'sanitizeObjectNames_v0.0', '"%SIPObjectsDirectory%" "%SIPUUID%" "%date%" "%taskUUID%" "sipDirectory" "sipUUID"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize object\'s file and directory names');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setDirectoryPermissionsForAppraisal_v0.0', '"%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set file permissions');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Remove cache files';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', TRUE, '%SIPLogsDirectory%removeUnneededFiles.log', '%SIPLogsDirectory%removeUnneededFiles.log', 'removeUnneededFiles_v0.0',  '"%relativeLocation%" "%fileUUID%" "%SIPLogsDirectory%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Remove thumbs.db files');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Include default SIP processingMCP.xml';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copy_v0.0', '"%sharedPath%sharedMicroServiceTasksConfigs/processingMCPConfigs/defaultSIPProcessingMCP.xml" "%SIPDirectory%processingMCP.xml" -n');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Include default SIP processingMCP.xml');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Rename SIP directory with SIP UUID';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%processingDirectory%%SIPName%-%SIPUUID%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Rename SIP directory with SIP UUID');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Failed compliance';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/SIPCreation/SIPsUnderConstruction/." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Failed compliance. See output in dashboard. SIP moved back to SIPsUnderConstruction.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @FailedSIPComplianceChainLink = @MicroServiceChainLink;


SET @microserviceGroup  = 'Verify SIP compliance';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifySIPCompliance_v0.0', '"%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Verify SIP compliance');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @FailedSIPComplianceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- Set file permissions
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'SIP Creation complete');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%system/autoProcessSIP', @MicroServiceChain, @expectedTypeSIP);

SET @microserviceGroup  = 'Approve SIP creation';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Approve SIP Creation');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'SIP Creation');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%SIPCreation/SIPsUnderConstruction', @MicroServiceChain, @expectedTypeSIP);















-- <transfer> --

-- Move To Failed Directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%failed/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the failed directory');

INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink, defaultPlaySound) 
    VALUES (LAST_INSERT_ID(), NULL, @errorSound); 
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @defaultNextChainLink = @MicroServiceChainLink;

-- Move to processing directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%processingDirectory%." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to processing directory');
set @moveToProcessingDirectoryTaskConfig = LAST_INSERT_ID();;


-- Reject Transfer --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%rejectedDirectory%." "%SIPUUID%" "%sharedPath%"');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the rejected directory');

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL); 
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Reject transfer');
set @rejectSIPMicroServiceChain = LAST_INSERT_ID();

-- 'Create SIP from Transfer'
SET @microserviceGroup  = 'Create SIP from Transfer';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/SIPCreation/completedTransfers/." "%SIPUUID%" "%sharedPath%"');
SET @moveToCompletedTransferTaskTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Move to completedTransfers directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createSIPfromTransferObjects_v0.0', '"%SIPObjectsDirectory%" "%SIPName%" "%SIPUUID%" "%processingDirectory%" "%sharedPath%watchedDirectories/system/autoProcessSIP/" "%sharedPath%"');
SET @moveToCompletedTransferTaskTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Create SIP from transfer objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Create single SIP and continue processing');
set @MicroServiceChain = LAST_INSERT_ID();

SET @microserviceGroup  = 'Create SIP from Transfer';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/SIPCreation/completedTransfers/." "%SIPUUID%" "%sharedPath%"');
SET @moveToCompletedTransferTaskTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Move to completedTransfers directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Create SIP from Transfer';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/SIPCreation/completedTransfers/." "%SIPUUID%" "%sharedPath%"');
SET @moveToCompletedTransferTaskTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Move to completedTransfers directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createSIPfromTransferObjects_v0.0', '"%SIPObjectsDirectory%" "%SIPName%" "%SIPUUID%" "%processingDirectory%" "%sharedPath%watchedDirectories/SIPCreation/SIPsUnderConstruction/" "%sharedPath%"');
SET @moveToCompletedTransferTaskTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Create SIP from transfer objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Create single SIP');
set @MicroServiceChain2 = LAST_INSERT_ID();

INSERT INTO MicroServiceChains (startingLink, description) VALUES (Null,  'Manual SIP creation');
set @MicroServiceChain3 = LAST_INSERT_ID();


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Create SIP(s)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain2);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain3);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- check for objects
SET @microserviceGroup  = 'Complete transfer';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'checkTransferDirectoryForObjects_v0.0', '"%SIPObjectsDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Check transfer directory for objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 179, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Check transfer directory for objects');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%SIPCreation/completedTransfers/', @MicroServiceChain, @expectedTypeTransfer);

-- transfer processing complete --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/SIPCreation/completedTransfers/." "%SIPUUID%" "%sharedPath%"');
SET @moveToCompletedTransferTaskTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Move to completedTransfers directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Characterize and extract metadata';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, NULL, NULL, 'FITS_v0.0', '"%relativeLocation%" "%SIPLogsDirectory%fileMeta/%fileUUID%.xml" "%date%" "%taskUUID%" "%fileUUID%" "%fileGrpUse%"');
SET @CharacterizeandextractmetadataTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @CharacterizeandextractmetadataTask, 'Characterize and extract metadata');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Clean up names';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, '%SIPDirectory%SIPnameCleanup.log', 'sanitizeSIPName_v0.0', '"%relativeLocation%" "%SIPUUID%" "%date%" "%sharedPath%"');    
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize Transfer name');
SET @SanitizeTransferNameTask = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%filenameCleanup.log', '%SIPLogsDirectory%filenameCleanup.log', 'sanitizeObjectNames_v0.0', '"%SIPObjectsDirectory%" "%SIPUUID%" "%date%" "%taskUUID%" "transferDirectory" "transferUUID"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize object\'s file and directory names');
SET @SanitizeTransferObjectsTask = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


SET @microserviceGroup  = 'Scan for viruses';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, '%SIPLogsDirectory%clamAVScan.txt', 'archivematicaClamscan_v0.0', '"%fileUUID%" "%relativeLocation%" "%date%" "%taskUUID%"');
SET @ScanforvirusesTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ScanforvirusesTask, 'Scan for viruses');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Extract packages';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%extraction.log', '%SIPLogsDirectory%extraction.log', 'transcoderExtractPackages_v0.0', '"%relativeLocation%" "%SIPDirectory%" "%SIPUUID%" "%date%" "%taskUUID%" "%fileUUID%"');
SET @ExtractpackagesTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ExtractpackagesTask, 'Extract packages');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
-- set @NextMicroServiceChainLink = @MicroServiceChainLink; --

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Skip quarantine');
set @SkipQuarantineMicroServiceChain = LAST_INSERT_ID();

-- quarantine --
SET @microserviceGroup  = 'Quarantine';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES -- --eventDetail --eventOutcome --eventOutcomeDetailNote --
    (NULL, NULL, 'objects', FALSE, NULL, NULL, 'createEvent_v0.0', '--eventType "unquarantine" --fileUUID "%fileUUID%" --eventIdentifierUUID "%taskUUID%" --eventDateTime "%jobCreatedDate%"');
SET @CreateunquarantinedPREMISeventsTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @CreateunquarantinedPREMISeventsTask, 'Create unquarantine PREMIS events');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setFilePermission_v0.0', ' -R 750 "%relativeLocation%"');
SET @SetunquarantinedfilepermissionsonTransferTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @SetunquarantinedfilepermissionsonTransferTask, 'Set unquarantined file permissions on Transfer');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'SIP Creation complete');
set @MicroServiceChain = LAST_INSERT_ID();

-- --
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Unquarantine');
set @MicroServiceChain = LAST_INSERT_ID();


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      @RemovefromquarantineTask, 'Remove from quarantine');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @unquarantineDefaultTransferMagicChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, NULL, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (4,      LAST_INSERT_ID(), 'Find type to remove from quarantine as');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Unquarantine');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%quarantined/', @MicroServiceChain, @expectedTypeTransfer);

-- Remove from quarantine ^  --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%quarantined/." "%SIPUUID%" "%sharedPath%"');
SET @MovetoquarantinedTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MovetoquarantinedTask, 'Move to quarantine');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @unquarantineDefaultTransferMagicChainLink, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Designate to process as a standard transfer when unquarantined.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES -- --eventDetail --eventOutcome --eventOutcomeDetailNote --
    (NULL, NULL, 'objects', FALSE, NULL, NULL, 'createEvent_v0.0', '--eventType "quarantine" --fileUUID "%fileUUID%" --eventIdentifierUUID "%taskUUID%" --eventDateTime "%jobCreatedDate%"');
SET  @CreatequarantinedPREMISeventsTask= LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,     @CreatequarantinedPREMISeventsTask , 'Create quarantine PREMIS events');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setFilePermission_v0.0', '700 -R "%relativeLocation%"');
SET @SetquarantinepermissionsontransferTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @SetquarantinepermissionsontransferTask, 'Set quarantine permissions on transfer');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Quarantine');
set @QuarantineMicroServiceChain = LAST_INSERT_ID();


-- /quarantine --



INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Workflow decision - send transfer to quarantine');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @QuarantineMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @SkipQuarantineMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @WorkflowdecisionsendtransfertoquarantineDefaultTransferMagicChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, NULL, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (4,      LAST_INSERT_ID(), 'Find type to process as');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'quarantineSIP ?');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%workFlowDecisions/quarantineSIP/', @MicroServiceChain, @expectedTypeTransfer);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/workFlowDecisions/quarantineSIP/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
Set @MovetoworkFlowDecisionsquarantineSIPdirectory = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MovetoworkFlowDecisionsquarantineSIPdirectory, 'Move to workFlowDecisions-quarantineSIP directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @WorkflowdecisionsendtransfertoquarantineDefaultTransferMagicChainLink, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Designate to process as a standard transfer.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Generate METS.xml document';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createMETS_v0.0', '--sipUUID "%SIPUUID%" --basePath "%SIPDirectory%" --xmlFile "%SIPLogsDirectory%"METS.xml --basePathString "transferDirectory" --fileGroupIdentifier "transferUUID"');
set @GenerateMETSxmldocument = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @GenerateMETSxmldocument, 'Generate METS.xml document');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Verify transfer checksums';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifyMD5_v0.0', '"%relativeLocation%"  "%checksumsNoExtention%" "%date%" "%taskUUID%" "%SIPUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Verify metadata directory checksums');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Assign file UUIDs and checksums';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, NULL, NULL, 'updateSizeAndChecksum_v0.0',  '--filePath "%relativeLocation%" --fileUUID "%fileUUID%" --eventIdentifierUUID "%taskUUID%" --date "%date%"');
SET @AssignchecksumsandfilesizestoobjectsTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignchecksumsandfilesizestoobjectsTask, 'Assign checksums and file sizes to objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', TRUE, '%SIPLogsDirectory%FileUUIDs.log', '%SIPLogsDirectory%FileUUIDsError.log', 'assignFileUUIDs_v0.0',  '--transferUUID "%SIPUUID%" --sipDirectory "%SIPDirectory%" --filePath "%relativeLocation%" --fileUUID "%fileUUID%" --eventIdentifierUUID "%taskUUID%" --date "%date%"');
SET @AssignfileUUIDstoobjects = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignfileUUIDstoobjects, 'Assign file UUIDs to objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Do not create transfer backup');
set @DoNotCreateTransferBackupMicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copy_v0.0', '"%SIPDirectory%" "%sharedPath%transferBackups/." -R --preserve');
SET @createTransferBackupTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @createTransferBackupTask, 'Create transfer backup (sharedDirectory/transferBackups)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Create transfer backup');
set @CreateTransferBackupMicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Workflow decision - create transfer backup');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @CreateTransferBackupMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @DoNotCreateTransferBackupMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @WorkflowdecisioncreateTransferBackupDefaultTransferMagicChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, NULL, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (4,      LAST_INSERT_ID(), 'Find type to process as');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'create transfer backup ?');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%workFlowDecisions/createTransferBackup/', @MicroServiceChain, @expectedTypeTransfer);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/workFlowDecisions/createTransferBackup/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
Set @MovetoworkFlowDecisionsquarantineSIPdirectory = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MovetoworkFlowDecisionsquarantineSIPdirectory, 'Move to workFlowDecisions-createTransferBackup directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @WorkflowdecisioncreateTransferBackupDefaultTransferMagicChainLink, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Designate to process as a standard transfer.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Include default Transfer processingMCP.xml';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copy_v0.0', '"%sharedPath%sharedMicroServiceTasksConfigs/processingMCPConfigs/defaultTransferProcessingMCP.xml" "%SIPDirectory%processingMCP.xml" -n');
SET @IncludedefaultTransferprocessingMCPxmlTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @IncludedefaultTransferprocessingMCPxmlTask, 'Include default Transfer processingMCP.xml');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- Rename with transfer UUID --
SET @microserviceGroup  = 'Rename with transfer UUID';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%processingDirectory%%SIPName%-%SIPUUID%" "%SIPUUID%" "%sharedPath%"');
SET @RenamewithtransferUUIDTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @RenamewithtransferUUIDTask, 'Rename with transfer UUID');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/activeTransfers/standardTransfer/." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Failed compliance. See output in dashboard. Transfer moved back to activeTransfers.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @FailTransferComplianceChainLink = LAST_INSERT_ID();

SET @microserviceGroup  = 'Verify Transfer compliance';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifyTransferCompliance_v0.0', '"%SIPDirectory%"');
SET @verifyTransferComplianceTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @verifyTransferComplianceTask, 'Verify Transfer compliance');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @FailTransferComplianceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'archivematicaSetTransferType_v0.0', '"%SIPUUID%" "Standard"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set transfer type: Standard');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Transfer complete');
set @MicroServiceChain = LAST_INSERT_ID();


SET @microserviceGroup  = 'Approve transfer';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Approve transfer');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Transfers In progress');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%activeTransfers/standardTransfer', @MicroServiceChain, @expectedTypeTransfer);
































-- DSPACE TRANSER --
-- transfer processing complete --
SET @microserviceGroup  = 'Complete transfer';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @moveToCompletedTransferTaskTask, 'Move to completedTransfers directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Characterize and extract metadata';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @CharacterizeandextractmetadataTask, 'Characterize and extract metadata on objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Clean up names';
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @SanitizeTransferNameTask, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @SanitizeTransferObjectsTask, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

/*
SET @microserviceGroup  = 'Transfer arrangement';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('mets.xml', NULL, 'objects', FALSE, NULL, NULL, 'moveDspaceMetsFilesToDSpaceMETS_v0.0', '"%relativeLocation%" "%date%" "%taskUUID%" "%SIPDirectory%" "%SIPUUID%"');
-- ('mets.xml', NULL, 'objects', FALSE, NULL, NULL, 'moveDspaceMetsFilesToDSpaceMETS_v0.0', '"%relativeLocation%" "%date%" "%taskUUID%" "%SIPDirectory%" "%fileUUID%"')
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Move DSpace Mets.xml files to DSpaceMETS directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
*/

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('mets.xml', NULL, 'objects', FALSE, NULL, NULL, 'identifyDspaceMETSFiles_v0.0', '"%fileUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Identify DSpace license files');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('mets.xml', NULL, 'objects', FALSE, NULL, NULL, 'identifyDspaceLicenseFiles_v0.0', '"%relativeLocation%" "%date%" "%taskUUID%" "%SIPDirectory%" "%SIPUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Identify DSpace license files');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('mets.xml', NULL, 'objects', FALSE, NULL, NULL, 'identifyDspaceTextFiles_v0.0', '"%relativeLocation%" "%date%" "%taskUUID%" "%SIPDirectory%" "%SIPUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Identify DSpace text files');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


SET @microserviceGroup  = 'Verify transfer checksums';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('mets.xml', NULL, 'objects', TRUE, '%SIPLogsDirectory%verifyChecksumsInFileSecOfDspaceMETSFiles.log', '%SIPLogsDirectory%verifyChecksumsInFileSecOfDspaceMETSFiles.log', 'verifyChecksumsInFileSecOfDspaceMETSFiles_v0.0', '"%relativeLocation%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Verify checksums in fileSec of Dspace METS files');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Scan for viruses';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ScanforvirusesTask, 'Scan for viruses');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Extract packages';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @ExtractpackagesTask, 'Extract packages');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
-- set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Skip quarantine');
set @SkipQuarantineMicroServiceChain = LAST_INSERT_ID();

-- quarantine --
SET @microserviceGroup  = 'Quarantine';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @CreateunquarantinedPREMISeventsTask, 'Create unquarantine PREMIS events');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @SetunquarantinedfilepermissionsonTransferTask, 'Set unquarantined file permissions on Transfer');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'SIP Creation complete');
set @MicroServiceChain = LAST_INSERT_ID();

-- --
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Unquarantine');
set @MicroServiceChain = LAST_INSERT_ID();


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      @RemovefromquarantineTask, 'Remove from quarantine');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @unquarantineDefaultTransferMagicChainLink = @MicroServiceChainLink;


-- Remove from quarantine ^  --

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%quarantined/." "%SIPUUID%" "%sharedPath%"');
SET @MovetoquarantinedTask = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MovetoquarantinedTask, 'Move to quarantined');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @unquarantineDefaultTransferMagicChainLink, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Designate to process as a Dspace 1.7 transfer when unquarantined.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,     @CreatequarantinedPREMISeventsTask , 'Create quarantine PREMIS events');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @SetquarantinepermissionsontransferTask, 'Set quarantine permissions on transfer');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Quarantine');
set @QuarantineMicroServiceChain = LAST_INSERT_ID();


-- /quarantine --



INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Workflow decision - send transfer to quarantine');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @QuarantineMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @SkipQuarantineMicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
set @WorkflowdecisionsendtransfertoquarantineDspace17TransferMagicChainLink = @NextMicroServiceChainLink;




INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @MovetoworkFlowDecisionsquarantineSIPdirectory, 'Move to workFlowDecisions-quarantineSIP directory');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, NULL);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, @WorkflowdecisionsendtransfertoquarantineDspace17TransferMagicChainLink, NULL);
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (3,      LAST_INSERT_ID(), 'Designate to process as a DSpace1.7 transfer.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


SET @microserviceGroup  = 'Generate METS.xml';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createMETS_v0.0', '--sipUUID "%SIPUUID%" --basePath "%SIPDirectory%" --xmlFile "%SIPLogsDirectory%"METS.xml --basePathString "transferDirectory" --fileGroupIdentifier "transferUUID"');
set @GenerateMETSxmldocument = LAST_INSERT_ID();
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @GenerateMETSxmldocument, 'Generate METS.xml document');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Verify transfer checksum';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifyMD5_v0.0', '"%relativeLocation%"  "%checksumsNoExtention%" "%date%" "%taskUUID%" "%SIPUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Verify metadata directory checksums');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Assign file UUIDs and checksums';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignchecksumsandfilesizestoobjectsTask, 'Assign checksums and file sizes to objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      @AssignfileUUIDstoobjects, 'Assign file UUIDs to objects');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

SET @microserviceGroup  = 'Include default Transfer processingMCP.xml';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @IncludedefaultTransferprocessingMCPxmlTask, 'Include default Transfer processingMCP.xml');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @createTransferBackupTask, 'Create transfer backup (sharedDirectory/transferBackups)');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


-- Rename with transfer UUID --
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @RenamewithtransferUUIDTask, 'Rename with transfer UUID');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/activeTransfers/Dspace1.7/." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Failed compliance. See output in dashboard. Transfer moved back to activeTransfers.');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @FailTransferComplianceChainLink = LAST_INSERT_ID();

SET @microserviceGroup  = 'Verify Transfer compliance';
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      @verifyTransferComplianceTask, 'Verify Transfer compliance');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @FailTransferComplianceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'archivematicaSetTransferType_v0.0', '"%SIPUUID%" "Dspace1.7"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set transfer type: Dspace1.7');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


-- move to processing directory --
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)     
    VALUES (@microserviceGroup, @setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Transfer complete');
set @MicroServiceChain = LAST_INSERT_ID();

SET @microserviceGroup  = 'Approve transfer';
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', '');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Approve Dspace1.7 transfer');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Dspace1.7 Transfers In progress');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%activeTransfers/Dspace1.7', @MicroServiceChain, @expectedTypeTransfer);

-- /DPSACE TRANSFER --


-- VIEWS --
-- SELECT count(taskUUID) from lastJobsTasks;
CREATE OR REPLACE VIEW lastJobsTasks AS SELECT * FROM Tasks WHERE jobUUID = (SELECT jobUUID FROM Jobs ORDER BY createdTime DESC, createdTimeDec DESC LIMIT 1);

CREATE OR REPLACE VIEW lastJobsInfo AS SELECT count(taskUUID) AS 'Completed Tasks', min(startTime), max(endTime), TIMEDIFF(UTC_TIMESTAMP(), min(startTime)) AS 'Job duration', TIMEDIFF(UTC_TIMESTAMP(), max(endTime)) AS 'Time Since last return', TIME(TIMEDIFF(UTC_TIMESTAMP(), min(startTime))/count(taskUUID)) AS 'AVG proc time'  FROM lastJobsTasks where startTime != 0;

-- /VIEWS --
