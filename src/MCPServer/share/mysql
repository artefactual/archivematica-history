/*
#!/usr/bin/python

# This file is part of Archivematica.
#
# Copyright 2010-2011 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @subpackage MCPServer
# @author Joseph Perry <joseph@artefactual.com>
# @version svn: $Id$
*/

-- clear && sudo mysql --execute="source ./mysql" MCP --
DROP TABLE IF EXISTS Transfers;
CREATE TABLE Transfers (
    transferUUID        VARCHAR(50) PRIMARY KEY,
    currentLocation     LONGTEXT,
    accessionID         LONGTEXT,
    sourceOfAcquisition LONGTEXT,
    typeOfTransfer      LONGTEXT,
    description         LONGTEXT,
    notes               LONGTEXT
);

DROP TABLE IF EXISTS Tasks;
CREATE TABLE Tasks (
    taskUUID        VARCHAR(50) PRIMARY KEY,
    jobUUID         VARCHAR(50),
    createdTime     TIMESTAMP(8) DEFAULT NOW(),
    fileUUID        VARCHAR(50),
    fileName        VARCHAR(100),
    exec            VARCHAR(50),
    arguments       VARCHAR(1000),
    startTime       TIMESTAMP(8),
    client          VARCHAR(50),
    endTime         TIMESTAMP(8),
    stdOut          LONGTEXT,
    stdError        LONGTEXT,
    exitCode        BIGINT
);

DROP TABLE IF EXISTS Jobs;
CREATE TABLE Jobs (
    jobUUID         VARCHAR(50) PRIMARY KEY,
    jobType         VARCHAR(250),
    createdTime     TIMESTAMP(8) DEFAULT NOW(),
    createdTimeDec  decimal(24,10) NOT NULL DEFAULT 0,
    directory       VARCHAR(250),
    SIPUUID         VARCHAR(50),
    currentStep     VARCHAR(50),
    hidden          BOOLEAN NOT NULL DEFAULT 0
);

DROP TABLE IF EXISTS jobStepCompleted;
CREATE TABLE jobStepCompleted (
    pk              BIGINT PRIMARY KEY AUTO_INCREMENT,
    jobUUID         VARCHAR(50),
    completedTime   TIMESTAMP(8) DEFAULT NOW(),
    step            VARCHAR(50)
);

DROP TABLE IF EXISTS SIPs;
CREATE TABLE SIPs (
    sipUUID         VARCHAR(50) PRIMARY KEY,
    createdTime     TIMESTAMP(8) DEFAULT NOW(),
    currentPath     LONGTEXT
);


DROP TABLE IF EXISTS Files;
CREATE TABLE Files(
    fileUUID            VARCHAR(50) PRIMARY KEY,
    originalLoacation   LONGTEXT,
    currentLocation     LONGTEXT,
    sipUUID             VARCHAR(50),
    Foreign Key (sipUUID) references SIPs(sipUUID),
    transferUUID             VARCHAR(50),
    Foreign Key (transferUUID) references Transfers(transferUUID),
    removedTime         TIMESTAMP(8) DEFAULT 0,
    enteredSystem       TIMESTAMP(8) DEFAULT NOW()
);


DROP TABLE IF EXISTS FilesFits;
CREATE TABLE FilesFits(
    fileUUID   VARCHAR(50) PRIMARY KEY,
    Foreign Key (fileUUID) references Files(fileUUID),
    FITSxml    LONGTEXT
);

DROP TABLE IF EXISTS FilesIDs;
CREATE TABLE FilesIDs(
    pk              INT PRIMARY KEY,
    fileUUID        VARCHAR(50),
    Foreign Key (fileUUID) references Files(fileUUID),
    formatName      LONGTEXT,
    formatVersion   LONGTEXT,
    formatRegistryName  LONGTEXT,
    formatRegistryKey   LONGTEXT
);

DROP TABLE IF EXISTS LinkingAgentIdentifiers;
CREATE TABLE LinkingAgentIdentifiers(
    pk      INT PRIMARY KEY AUTO_INCREMENT,
    Type    LONGTEXT,
    Value   LONGTEXT
);

DROP TABLE IF EXISTS Events;
CREATE TABLE Events(
    pk                  BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    fileUUID            VARCHAR(50),
    Foreign Key (fileUUID) references Files(fileUUID),
    eventIdentifierUUID VARCHAR(50),
    eventType           LONGTEXT,
    eventDateTime       TIMESTAMP(8),
    eventDetail         LONGTEXT,
    eventOutcome        LONGTEXT,
    eventOutcomeDetailNote  LONGTEXT,
    linkingAgentIdentifier  INT,
    Foreign Key (linkingAgentIdentifier) references linkingAgentIdentifiers(pk)
);

DROP TABLE IF EXISTS Derivations;
CREATE TABLE Derivations (
    pk               BIGINT PRIMARY KEY AUTO_INCREMENT,
    sourceFileUUID   VARCHAR(50),
    Foreign Key (sourceFileUUID) references Files(fileUUID),
    derivedFileUUID  VARCHAR(50),
    Foreign Key (derivedFileUUID) references Files(fileUUID),
    relatedEventUUID VARCHAR(50)
);



DROP TABLE IF EXISTS Sounds;
CREATE TABLE Sounds(
    pk  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    description        LONGTEXT,
    fileLocation       LONGTEXT
);

set @errorSound = 1;
set @alertSound = 2;
set @requiresApprovalSound = 3;

INSERT INTO Sounds
    (pk, description, fileLocation) 
    VALUES ( @errorSound, 'Error', '/usr/share/sounds/KDE-Im-Error-On-Connection.ogg'),
    ( @alertSound, 'Alert', '/usr/share/sounds/KDE-Im-Irc-Event.ogg'),
    ( @requiresApprovalSound, 'Requires approval', '/usr/share/sounds/KDE-Sys-List-End.ogg');




DROP TABLE IF EXISTS MicroServiceChainLinks;
CREATE TABLE MicroServiceChainLinks (
    pk  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    currentTask                 INT UNSIGNED,
    Foreign Key (currentTask) references TasksConfigs(pk),            
    defaultNextChainLink        INT UNSIGNED DEFAULT 1,   
    Foreign Key (defaultNextChainLink) references MicroServiceChainLinks(pk),    
    defaultPlaySound   INT,
    Foreign Key (defaultPlaySound) references Sounds(pk),    
    reloadFileList      BOOLEAN DEFAULT TRUE
);

DROP TABLE IF EXISTS MicroServiceChainLinksExitCodes;
CREATE TABLE MicroServiceChainLinksExitCodes (
    pk  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    microServiceChainLink   INT UNSIGNED,
    Foreign Key (microServiceChainLink) references MicroServiceChainLinks(pk),
    exitCode    INT DEFAULT 0,
    nextMicroServiceChainLink   INT UNSIGNED,
    Foreign Key (nextMicroServiceChainLink) references MicroServiceChainLinks(pk),
    playSound   INT,
    Foreign Key (playSound) references Sounds(pk)
);

DROP TABLE IF EXISTS MicroServiceChains;
CREATE TABLE MicroServiceChains (
    pk              INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, 
    startingLink    INT UNSIGNED,
    Foreign Key (startingLink) references MicroServiceChainLinks(pk),           
    description     LONGTEXT
);

DROP TABLE IF EXISTS TaskTypes;
CREATE TABLE TaskTypes (
    pk                 INT UNSIGNED,
    description        LONGTEXT
);

INSERT INTO TaskTypes
    (pk, description) 
    VALUES ( 0, 'one instance'),
    ( 1, 'for each file'),
    ( 2, 'get user choice to proceed with');

DROP TABLE IF EXISTS TasksConfigs;
CREATE TABLE TasksConfigs (
    pk                  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    taskType            INT UNSIGNED,
    Foreign Key (taskType) references TaskTypes(pk),
    taskTypePKReference INT UNSIGNED,
    description         LONGTEXT
);

DROP TABLE IF EXISTS StandardTasksConfigs;
CREATE TABLE StandardTasksConfigs (
    pk                  INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    filterFileEnd       VARCHAR(50),
    filterFileStart     VARCHAR(50),
    filterSubDir        VARCHAR(50),
    requiresOutputLock  BOOLEAN,
    standardOutputFile  VARCHAR(250),
    standardErrorFile   VARCHAR(250),
    execute             VARCHAR(50),
    arguments           LONGTEXT
);

DROP TABLE IF EXISTS MicroServiceChainChoice;
CREATE TABLE MicroServiceChainChoice (
    pk                      INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    choiceAvailableAtLink   INT UNSIGNED,
    Foreign Key (choiceAvailableAtLink) references MicroServiceChainLinks(pk),
    chainAvailable          INT UNSIGNED,
    Foreign Key (chainAvailable) references MicroServiceChains(pk)
);

DROP TABLE IF EXISTS WatchedDirectoriesExpectedTypes;
CREATE TABLE WatchedDirectoriesExpectedTypes (
    pk                      INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    description             LONGTEXT
);

SET @expectedTypeSIP = 1;
SET @expectedTypeDIP = 2;
SET @expectedTypeTransfer = 3;
INSERT INTO WatchedDirectoriesExpectedTypes(pk, description) 
    VALUES ( @expectedTypeSIP, 'SIP'),
    ( @expectedTypeDIP, 'DIP'),
    ( @expectedTypeTransfer, 'Transfer');

DROP TABLE IF EXISTS WatchedDirectories;
CREATE TABLE WatchedDirectories (
    pk                      INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    watchedDirectoryPath    LONGTEXT,
    chain                   INT UNSIGNED,
    Foreign Key (chain) references MicroServiceChains(pk),
    onlyActOnDirectories    BOOLEAN DEFAULT TRUE,
    expectedType            INT DEFAULT 1,
    Foreign Key (expectedType) references WatchedDirectoriesExpectedTypes(pk)
);


-- Move To Failed Directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%failed/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the failed directory');

INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink, defaultPlaySound) 
    VALUES (LAST_INSERT_ID(), NULL, @errorSound); 
set @defaultNextChainLink = LAST_INSERT_ID();

-- Move to processing directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%processingDirectory%." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to processing directory');
set @moveToProcessingDirectoryTaskConfig = LAST_INSERT_ID();;


-- Set file permissions --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setDirectoryPermissionsForAppraisal_v0.0', '"%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set file permissions');
set @setFilePermissionsTaskConfig = LAST_INSERT_ID();


-- Reject SIP --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%rejectedDirectory%." "%SIPUUID%" "%sharedPath%"');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the rejected directory');

INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL); 
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Reject SIP');
set @rejectSIPMicroServiceChain = LAST_INSERT_ID();

-- <uploadDIP> --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'move_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%uploadedDIPs/."');

INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the uploadedDIPs directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL); 
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'upload-qubit_v0.0', '--UUIDPrefixed -r -e demo@example.com -p demo -t "%SIPName%-%SIPUUID%" -f "%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'uploadDIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- disabled, because it uses the SIP uuid and updates the SIP/AIP directory location with that of the DIP --
/*
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;
*/

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Upload DIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'checkForSubmissionDocumenation_v0.0', '"%SIPDirectory%metadata/submissionDocumentation"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'uploadDIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'uploadDIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%uploadDIP/', @MicroServiceChain, @expectedTypeDIP);

-- </uploadDIP> --

-- Store AIP --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'removeWithAsterisk_v0.0', '"%sharedPath%SIPbackups/" "-%SIPUUID%/"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Remove the SIP Backup.');

INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @NextMicroServiceChainLink = LAST_INSERT_ID();


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'storeAIP_v0.0', '"%AIPsStore%" "%SIPDirectory%%SIPName%-%SIPUUID%.zip" "%SIPUUID%" "%sharedPath%www/index.html" "%SIPName%" "%date%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Store the AIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- --
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Store AIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'checkForSubmissionDocumenation_v0.0', '"%SIPDirectory%metadata/submissionDocumentation"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'StoreAIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'storeAIP');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%storeAIP/', @MicroServiceChain);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/storeAIP/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to the store AIP approval directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;
-- --

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'remove_v0.0', '-R "%SIPDirectory%METS.xml" "%SIPDirectory%metadata/" "%SIPLogsDirectory%" "%SIPObjectsDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Removed bagged files.');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setFilePermission_v0.0', '775 "%SIPDirectory%%SIPName%-%SIPUUID%.zip"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set bag file permissions');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'bagit_v0.0', 'create "%SIPDirectory%%SIPName%-%SIPUUID%.zip" "%SIPLogsDirectory%" "%SIPObjectsDirectory%" "%SIPDirectory%METS.xml" "%SIPDirectory%metadata/" --writer zip --payloadmanifestalgorithm "sha512"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Prepare AIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'move_v0.0', '"%SIPDirectory%DIP" "%sharedPath%watchedDirectories/uploadDIP/%SIPDirectoryBasename%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Generate DIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copy_v0.0', '"%SIPDirectory%METS.xml" "%SIPDirectory%DIP/METS.xml"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Copy METS to DIP directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'addDCTOMETS_v0.0', '"%SIPDirectory%" "%SIPDirectory%metadata/"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Add Dublin Core to METS');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, '%SIPLogsDirectory%METSGeneration.log', '%SIPLogsDirectory%METSGeneration.log', 'createMETS_v0.0', '"%SIPUUID%" "%SIPDirectory%" "%SIPDirectory%"METS.xml');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Generate METS.xml document');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'logs/fileMeta/', FALSE, '%SIPLogsDirectory%Verify PREMIS Checksums.log', '%SIPLogsDirectory%Verify PREMIS Checksums.log', 'verifyPREMISChecksums_v0.0', '"%SIPObjectsDirectory%" "%relativeLocation%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Verify checksums generated on ingest');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/', FALSE, '%SIPLogsDirectory%removedFilesWithNoPremisMetadata.log', '%SIPLogsDirectory%removedFilesWithNoPremisMetadata.log', 'removeFilesWithoutPresmisMetadata_v0.0', '--fileUUID "%fileUUID%" --inputFile "%relativeLocation%" --sipDirectory "%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Remove files without linking information (failed normalization artifacts etc.)');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizePreservation_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "preservation" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --sipUUID "%SIPUUID%" --sipPath "%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Normalize submission documentation to preservation format');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, NULL, NULL, 'FITS_v0.0', '"%relativeLocation%" "%SIPLogsDirectory%fileMeta/%fileUUID%.xml" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Characterize and extract metadata on submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, NULL, '%SIPLogsDirectory%clamAVScan.txt', 'archivematicaClamscan_v0.0', '"%fileUUID%" "%relativeLocation%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Scan for viruses in submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', FALSE, '%SIPLogsDirectory%filenameCleanup.log', '%SIPLogsDirectory%filenameCleanup.log', 'sanitizeObjectNames_v0.0', '"%SIPObjectsDirectory%" "%SIPUUID%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize file and directory names in submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, '%SIPLogsDirectory%extraction.log', '%SIPLogsDirectory%extraction.log', 'transcoderExtractPackages_v0.0', '"%relativeLocation%" "%SIPObjectsDirectory%" "%SIPLogsDirectory%" "%date%" "%taskUUID%" "%fileUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Extract packages in submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, '%SIPLogsDirectory%FileUUIDs.log', '%SIPLogsDirectory%FileUUIDsError.log', 'assignFileUUIDs_v0.0',  '"%SIPDirectory%" "%relativeLocation%" "%fileUUID%" "%SIPUUID%" "%taskUUID%" "%date%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Assign file UUIDs and checksums to submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'move_v0.0', '"%SIPDirectory%metadata/submissionDocumentation" "%SIPDirectory%objects/submissionDocumentation"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move Submission Documentation into objects directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'checkForSubmissionDocumenation_v0.0', '"%SIPDirectory%metadata/submissionDocumentation"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Check for submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Process submission documentation and prepare DIP and AIP.');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'checkForSubmissionDocumenation_v0.0', '"%SIPDirectory%metadata/submissionDocumentation"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Approve Normalization');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'approveNormalization');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%approveNormalization/', @MicroServiceChain);


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/approveNormalization/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to approve normalization directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizePreservation_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "preservation" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --sipUUID "%SIPUUID%" --sipPath "%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Normalize preservation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%normalizationLog.txt', '%SIPLogsDirectory%normalizationLog.txt', 'transcoderNormalizeAccess_v0.0', '--inputFile "%relativeLocation%" --commandClassifications "access" --fileUUID "%fileUUID%" --taskUUID "%taskUUID%" --excludeDirectory "%SIPObjectsDirectory%submissionDocumentation/" --objectsDirectory "%SIPObjectsDirectory%" --logsDirectory "%SIPLogsDirectory%" --date "%date%" --accessDirectory "%SIPDirectory%DIP/objects/"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Normalize access');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createDirectory_v0.0', '-m 770 "%SIPDirectory%DIP/" "%SIPDirectory%DIP/objects/"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Create DIP directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('.xml', NULL, 'logs/fileMeta/', FALSE, '%SIPLogsDirectory%removedFilesAppraiseSIPForPreservation.log', '%SIPLogsDirectory%removedFilesAppraiseSIPForPreservation.log', 'scanForRemovedFiles_v0.0', '"%SIPObjectsDirectory%" "%relativeLocation%" "Appraise SIP for Preservation" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Scan for removed files post appraise SIP for preservation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


-- move to processing directory --
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- --
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Prepare SIP for Preservation');
set @MicroServiceChain = LAST_INSERT_ID();


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', 'Prepare SIP for Preservation2.');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Remove from quarantine');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Prepare SIP for preservation');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%appraiseSIPForPreservation/', @MicroServiceChain);

-- Remove from  appraise SIP for preservation directory ^  --

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%appraiseSIPForPreservation/." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to appraise SIP for preservation directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), Null);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, NULL, NULL, 'FITS_v0.0', '"%relativeLocation%" "%SIPLogsDirectory%fileMeta/%fileUUID%.xml" "%date%" "%taskUUID%" "%fileUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Characterize and extract metadata');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @NextMicroServiceChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, '%SIPLogsDirectory%clamAVScan.txt', 'archivematicaClamscan_v0.0', '"%fileUUID%" "%relativeLocation%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Scan for viruses');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, '%SIPDirectory%SIPnameCleanup.log', 'sanitizeSIPName_v0.0', '"%relativeLocation%" "%SIPUUID%" "%date%" "%sharedPath%"');    
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize SIP name');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%filenameCleanup.log', '%SIPLogsDirectory%filenameCleanup.log', 'sanitizeObjectNames_v0.0', '"%SIPObjectsDirectory%" "%SIPUUID%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Sanitize object\'s file and directory names');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%extraction.log', '%SIPLogsDirectory%extraction.log', 'transcoderExtractPackages_v0.0', '"%relativeLocation%" "%SIPObjectsDirectory%" "%SIPLogsDirectory%" "%date%" "%taskUUID%" "%fileUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Extract packages');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('.xml', NULL, 'logs/fileMeta/', FALSE, NULL, NULL, 'createXMLEventUnquarantine_v0.0', '"%taskUUID%" "%jobCreatedDate%" "%relativeLocation%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Create unquarantined PREMIS events');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setFilePermission_v0.0', ' -R 750 "%relativeLocation%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set unquarantined file permissions on SIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- --
INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Unquarantine to appraise SIP for preservation.');
set @MicroServiceChain = LAST_INSERT_ID();


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, '', 'If desired, click Approve to remove the SIP from quarantine immediately. Otherwise, wait until the quarantine period has expired and the SIP will be removed automatically.');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Remove from quarantine');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Unquarantine');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%quarantined/', @MicroServiceChain);

-- Remove from quarantine ^  --


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    ('.xml', NULL, 'logs/fileMeta/', FALSE, NULL, NULL, 'createXMLEventQuarantine_v0.0', '"%taskUUID%" "%jobCreatedDate%" "%relativeLocation%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Create quarantined PREMIS events');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), Null);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setSIPQuarantine_v0.0', '700 "%relativeLocation%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set quarantine permissions on SIP');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%quarantined/." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to quarantined');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Quarantine to appraise SIP for preservation.');
set @MicroServiceChain = LAST_INSERT_ID();


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'appraiseSIP_v0.0', '"Appraise SIP for Submission3"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,     LAST_INSERT_ID(),      'Appraise SIP for Submission2');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;



INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Appraise SIP for Submission');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%appraiseSIPForSubmission', @MicroServiceChain);

-- Appraise SIP for Submission ^  --

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/appraiseSIPForSubmission/." "%SIPUUID%" "%sharedPath%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(),  'Move to the appraise SIP for submission directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'setDirectoryPermissionsForAppraisal_v0.0', '"%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Set file permissions');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'createOrMoveDC_v0.0', '"%SIPDirectory%" dublincore.xml');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Create Dublin Core template');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', TRUE, '%SIPLogsDirectory%removeUnneededFiles.log', '%SIPLogsDirectory%removeUnneededFiles.log', 'removeUnneededFiles_v0.0',  '"%relativeLocation%" "%fileUUID%" "%SIPLogsDirectory%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Remove thumbs.db files');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifyMD5_v0.0', '"%relativeLocation%"  "%checksumsNoExtention%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Verify metadata directory checksums - TODO change from MD5_v0.0');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', TRUE, '%SIPLogsDirectory%FileUUIDs.log', '%SIPLogsDirectory%FileUUIDsError.log', 'assignFileUUIDs_v0.0',  '"%SIPDirectory%" "%relativeLocation%" "%fileUUID%" "%SIPUUID%" "%taskUUID%" "%date%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Assign file UUIDs');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifySIPCompliance_v0.0', '"%SIPDirectory%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Verify SIP compliance');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'copy_v0.0', '-R --preserve=mode,ownership,timestamps "%SIPDirectory%" "%sharedPath%SIPbackups/."');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Create SIP backup');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%processingDirectory%%SIPName%-%SIPUUID%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Rename SIP directory with SIP UUID');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- move to processing directory --
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@moveToProcessingDirectoryTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Receive SIP');
set @MicroServiceChain = LAST_INSERT_ID();



INSERT INTO WatchedDirectories (watchedDirectoryPath, chain)
    VALUES ('%watchDirectoryPath%receiveSIP', @MicroServiceChain);

-- --

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%sharedPath%watchedDirectories/preIngest/SIPCreation/completedTransfers" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to completedTransfers directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
/*INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);*/
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, '%SIPLogsDirectory%clamAVScan.txt', 'archivematicaClamscan_v0.0', '"%fileUUID%" "%relativeLocation%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Scan for viruses');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects', FALSE, '%SIPLogsDirectory%extraction.log', '%SIPLogsDirectory%extraction.log', 'transcoderExtractPackages_v0.0', '"%relativeLocation%" "%SIPObjectsDirectory%" "%SIPLogsDirectory%" "%date%" "%taskUUID%" "%fileUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Extract packages');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- quarantine --

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'verifyMD5_v0.0', '"%relativeLocation%"  "%checksumsNoExtention%" "%date%" "%taskUUID%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Verify metadata directory checksums - TODO change from MD5_v0.0');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, 'objects/submissionDocumentation', TRUE, '%SIPLogsDirectory%FileUUIDs.log', '%SIPLogsDirectory%FileUUIDsError.log', 'assignFileUUIDs_v0.0',  '"%SIPDirectory%" "%relativeLocation%" "%fileUUID%" "%SIPUUID%" "%taskUUID%" "%date%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (1,      LAST_INSERT_ID(), 'Assign file UUIDs and checksums to submission documentation');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (@setFilePermissionsTaskConfig, @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;

-- Move to processing directory --
INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, FALSE, NULL, NULL, 'moveTransfer_v0.0', '"%SIPDirectory%" "%processingDirectory%%SIPName%-%SIPUUID%" "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (0,      LAST_INSERT_ID(), 'Move to processing directory');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), @defaultNextChainLink);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainLinksExitCodes (microServiceChainLink, exitCode, nextMicroServiceChainLink) 
    VALUES (@MicroServiceChainLink, 0, @NextMicroServiceChainLink);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Transfer complete');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO StandardTasksConfigs (filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES
    (NULL, NULL, NULL, TRUE, NULL, NULL, 'checkForSubmissionDocumenation_v0.0', '"%SIPDirectory%metadata/submissionDocumentation"');
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Transfer complete');
INSERT INTO MicroServiceChainLinks (currentTask, defaultNextChainLink) 
    VALUES (LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainLink, @rejectSIPMicroServiceChain);
set @NextMicroServiceChainLink = @MicroServiceChainLink;


INSERT INTO MicroServiceChains (startingLink, description) VALUES (@MicroServiceChainLink,  'Transfers In progress');
set @MicroServiceChain = LAST_INSERT_ID();

INSERT INTO WatchedDirectories (watchedDirectoryPath, chain, expectedType)
    VALUES ('%watchDirectoryPath%preIngest/activeTransfers', @MicroServiceChain, @expectedTypeTransfer);

