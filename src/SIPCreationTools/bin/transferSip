#!/usr/bin/python
#
# This file is part of Archivematica.
#
# Copyright 2010-2011 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @subpackage SIP submission
# @author Austin Trask <austin@artefactual.com>
# @version svn: $Id$
#

import os
import sys
import uuid
import shutil
import argparse
import subprocess

###########
##Create options and arguments
###########
parser = argparse.ArgumentParser()

parser.add_argument('-SIP', action='store', dest='sipForSubmission', default='/some/random/dir', help='Path to SIP')

parser.add_argument('-local', action='store', dest='localSubmission', default='/var/archivematica/sharedDirectory/watchedDirectories/receiveSIP', help='set the local SIP destination (/path/to/my/receiveSIP/)')

parser.add_argument('-remotehost', action='store', dest='remoteHost', help='set the remote host (username@host)')

parser.add_argument('-remotetmp', action='store', dest='remoteTmp', default='/tmp/sipSend/', help='set the remote SIP destination /tmp/destination/folder')

parser.add_argument('-remotereceivesip', action='store', dest='remoteReceiveSip', default='/var/archivematica/sharedDirectory/watchedDirectories/receiveSIP', help='recieveSip directory on remote host')


results = parser.parse_args()


###########
##check if arguments exist if so attempt transfer or move
###########
if os.path.isdir(results.sipForSubmission):
  try:
    baseSip = os.path.basename(results.sipForSubmission)
    if os.path.isdir(results.localSubmission):
      try:
        shutil.move(results.sipForSubmission, results.localSubmission)
        runStatus = baseSip + ": local transfer Success!"
      except IOError, e:
        print e
        sys.exit("fail: please check your path")
    else:
       print("no local directory set, trying remote host")
    if results.remoteHost:
      try: 
        tmpUUID = uuid.uuid1()
        tmpDir = results.remoteTmp + str(tmpUUID)      
	tmpSip = tmpDir + "/" + baseSip
        destHostSip = results.remoteHost + ":" + tmpDir
        p = subprocess.call(['ssh', results.remoteHost, 'mkdir', '-p', tmpDir])
        p = subprocess.call(['rsync', '-crh', results.sipForSubmission, destHostSip])
        p = subprocess.call(['ssh', results.remoteHost, 'mv', tmpSip, results.remoteReceiveSip])
        runStatus = baseSip + ": remote transfer Success!"
      except IOError, e:
        print e
        sys.exit("fail: please check your user name ssh key")
    else:
      print("remote ssh transfer failed, use --help for more information")
      sys.exit("fail: please check your paths"  )
  except IOError, e:
    print e
    sys.exit("fail: please check your path")
else:
  sys.exit("fail: please set a SIP")

print runStatus
p = subprocess.call(['notify-send', '-u', 'critical', 'SIP Submission', runStatus])

