DROP TABLE IF EXISTS CommandTypes;
CREATE TABLE CommandTypes (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    type TEXT
);

INSERT INTO CommandTypes (type) 
    VALUES 
    ('command'), 
    ('bashScript'), 
    ('pythonScript'); 

DROP TABLE IF EXISTS CommandClassifications;
CREATE TABLE CommandClassifications (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    classification TEXT
);


INSERT INTO CommandClassifications
    (classification) VALUES('normalize'), ('access'), ('extract');

DROP TABLE IF EXISTS Commands;
CREATE TABLE Commands (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    commandType INT,
    Foreign Key (commandType) references CommandTypes(pk),
    verificationCommand INT,
    Foreign Key (verificationCommand) references Commands(pk),
    command LONGTEXT,
    outputLocation TEXT,
    eventDetailCommand INT,
    Foreign Key (eventDetailCommand) references Commands(pk),
    description LONGTEXT
);

DROP TABLE IF EXISTS CommandRelationships;
CREATE TABLE CommandRelationships (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    commandClassification INT,
    Foreign Key (commandClassification) references CommandClassifications(pk),
    command INT,
    Foreign Key (command) references Commands(pk),
    fileID INT,
    Foreign Key (fileID) references FileIDs(pk),
    GroupMember INT UNSIGNED DEFAULT 0,
    countAttempts INT UNSIGNED DEFAULT 0,
    countOK INT UNSIGNED DEFAULT 0,
    countNotOK INT UNSIGNED DEFAULT 0
);
-- UPDATE CommandRelationships SET countOK=countOK+1 Where pk=1234 --

DROP TABLE IF EXISTS FileIDs;
CREATE TABLE FileIDs (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    description TEXT
);

DROP TABLE IF EXISTS FileIDsByExtension;
CREATE TABLE FileIDsByExtension (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    Extension TEXT,
    FileIDs INT,
    Foreign Key (FileIDs) references Command(pk)
);

DROP TABLE IF EXISTS FileIDsByPronom;
CREATE TABLE FileIDsByPronom (
    pk INT PRIMARY KEY AUTO_INCREMENT,
    fileID TEXT,
    FileIDs INT,
    Foreign Key (FileIDs) references Command(pk)
);


INSERT INTO FileIDs
    (description) VALUES
    ('Normalize Defaults'), 
    ('Access Defaults'), 
    ('Extract Defaults'),
    ('7ZipCompatable'),
    ('unrar-nonfreeCompatable')
;

INSERT INTO Commands 
    (commandType, command, description) 
    SELECT pk,
    'test -e "%outputLocation%"',
    'Standard verification command'
    FROM CommandTypes WHERE type = 'command' ;

set @standardVerificationCommand = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, description) 
    SELECT pk,
    'test -e "%outputLocation%"',
    'Standard verification command'
    FROM CommandTypes WHERE type = 'command' ;

set @standardDirectoryVerificationCommand = LAST_INSERT_ID();

-- Default copy command --
INSERT INTO Commands 
    (commandType, verificationCommand, command, outputLocation, description) 
    VALUES 
    ((SELECT pk FROM CommandTypes WHERE type = 'command'),
    (SELECT pk FROM  (Select * From Commands) AS temp WHERE description = 'Verifying file exists and is not size 0'),
    'cp -R "%inputFile%" "%outputDirectory%%prefix%%fileName%%postfix%.%fileExtension%"',
    '%outputDirectory%%prefix%%fileName%%postfix%.%fileExtension%',
    'Copying File.');
    --     'cp --version | grep cp',


-- Associate default access with copy --
INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    (SELECT pk FROM Commands WHERE description = 'Copying File.'),
    (SELECT pk FROM FileIDs WHERE description = 'Access Defaults')
);

-- 7ZipCompatable

INSERT INTO Commands 
    (commandType, command, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"7z\\"\\; version=\\"`7z | grep Version`\\"'),
    ('Get event detail text for 7z extraction')
);

INSERT INTO Commands 
    (commandType, command, eventDetailCommand, outputLocation, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('7z x -bd -o"%outputDirectory%" "%inputFile%"'),
    LAST_INSERT_ID(),
    '%outputDirectory%',
    ('Extracting 7zip compatable file.')
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'extract'),
    (SELECT pk FROM Commands WHERE description = 'Extracting 7zip compatable file.'),
    (SELECT pk FROM FileIDs WHERE description = '7ZipCompatable')
);
-- END 7ZipCompatable

INSERT INTO Commands 
    (commandType, command, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"unrar-nonfree\\"\\; version=\\"`unrar-nonfree | grep \'UNRAR\'`\\"'),
    ('Get event detail text for unrar extraction')
);

-- unrar-nonfreeCompatable
INSERT INTO Commands 
    (commandType, command, eventDetailCommand, outputLocation, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('mkdir "%outputDirectory%" && unrar-nonfree x "%inputFile%" "%outputDirectory%"'),
    LAST_INSERT_ID(),
    '%outputDirectory%',
    ('Extracting unrar-nonfree compatable file.')
);
 


INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'extract'),
    (SELECT pk FROM Commands WHERE description = 'Extracting unrar-nonfree compatable file.'),
    (SELECT pk FROM FileIDs WHERE description = 'unrar-nonfreeCompatable')
);
-- END unrar-nonfreeCompatable


-- PST extraction
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .pst file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"readpst\\"\\; version=\\"`readpst -V`\\"'),
    ('convert event detail')
);

set @readPSTEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    'mkdir "%outputDirectory%" && readpst -r "%inputFile%" -o "%outputDirectory%"',
    '%outputDirectory%',
    @readPSTEventDetailCommandID,
    @standardDirectoryVerificationCommand,
    ('Extracting pst file')
);
set @readPSTtoMBOXCommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'extract'),
    @readPSTtoMBOXCommandID,
    @fileID
);

-- END PST extraction

-- ADD Normalization Path for .JPG --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .jpg file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'jpg',
    @fileID
);


INSERT INTO Commands 
    (commandType, command, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"convert\\"\\; version=\\"`convert -version | grep Version:`\\"'),
    ('convert event detail')
);

set @convertToTifEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('convert "%fileFullName%" +compress "%outputDirectory%%prefix%%fileName%%postfix%.tif"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.tif',
    @convertToTifEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to tif with convert')
);
set @convertToTifCommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @convertToTifCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .JPG --

-- ADD Normalization Path for .GIF --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .gif file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'gif',
    @fileID
);


INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('convert "%fileFullName%" "%outputDirectory%%prefix%%fileName%%postfix%.jpg"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.jpg',
    @convertToTifEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to jpg with convert')
);
set @convertToJpgCommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @convertToTifCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .GIF --

-- ADD Normalization Path for .TIF --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .tif file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'tif',
    @fileID
);

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'tiff',
    @fileID
);


INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @convertToTifCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .TIF --


-- ADD Normalization Path for .PSD --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .psd file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'psd',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @convertToTifCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .PSD --

-- ADD Normalization Path for .JP2 --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .jp2 file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'jp2',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .JP2 --

-- ADD Normalization Path for .PNG --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .png file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'png',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .PNG --

-- ADD Normalization Path for .TGA --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .tga file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'tga',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @convertToTifCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .TGA --

-- ADD Normalization Path for .BMP --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .bmp file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'bmp',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @convertToTifCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @convertToJpgCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .BMP --


-- Commands for handling Video files --
INSERT INTO Commands 
    (commandType, command, description) 
    -- VALUES SELECT pk FROM FileIDS WHERE description = 'Normalize Defaults'
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"ffmpeg\\"\\; version=\\"`ffmpeg 2>&1 | grep \"FFmpeg version\"`\\"'),
    ('Get event detail text for unrar extraction')
);

set @ffmpegEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('ffmpeg -i "%fileFullName%" -ar 44100 "%outputDirectory%%prefix%%fileName%%postfix%.mpg"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.mpg',
    @ffmpegEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to mpg with ffmpeg')
);
set @ffmpegToMPGCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('ffmpeg -i "%fileFullName%" -vcodec mpeg2video -qscale 1 -qmin 1 -intra -ar 48000 "%outputDirectory%%prefix%%fileName%%postfix%.mxf"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.mxf',
    @ffmpegEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to mxf with ffmpeg')
);
set @ffmpegToMXFCommandID = LAST_INSERT_ID();

-- End of Commands for handling Video files --


-- ADD Normalization Path for .WMV --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .wmv file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'wmv',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .WMV --

-- ADD Normalization Path for .SWF --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .swf file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'swf',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .SWF --

-- ADD Normalization Path for .AVI --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .avi file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'avi',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .AVI --

-- ADD Normalization Path for .MOV --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .mov file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'mov',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .MOV --

-- ADD Normalization Path for .FLV --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .flv file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'flv',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .FLV --

-- ADD Normalization Path for .MPEG --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .mpeg file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'mpeg',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .MPEG --

-- ADD Normalization Path for .MP4 --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .mp4 file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'mp4',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToMXFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMPGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .MP4 --


-- Commands for handling Audio files --
INSERT INTO Commands 
    (commandType, command, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"ffmpeg\\"\\; version=\\"`ffmpeg 2>&1 | grep \"FFmpeg version\"`\\"'),
    ('Get event detail text for unrar extraction')
);

set @ffmpegEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('ffmpeg -i "%fileFullName%" -ab 192000 "%outputDirectory%%prefix%%fileName%%postfix%.mp3"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.mp3',
    @ffmpegEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to mpg with ffmpeg')
);
set @ffmpegToMP3CommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('ffmpeg -i "%fileFullName%" -vcodec mpeg2video -qscale 1 -qmin 1 -intra -ar 48000 "%outputDirectory%%prefix%%fileName%%postfix%.wav"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.wav',
    @ffmpegEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to mxf with ffmpeg')
);
set @ffmpegToWAVCommandID = LAST_INSERT_ID();

-- End of Commands for handling Audio files --


-- ADD Normalization Path for .AC3 --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .ac3 file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'ac3',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToWAVCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMP3CommandID,
    @fileID
);

-- End Of ADD Normalization Path for .AC3 --

-- ADD Normalization Path for .AIF --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .aif file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'aif',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToWAVCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMP3CommandID,
    @fileID
);

-- End Of ADD Normalization Path for .AIF --

-- ADD Normalization Path for .MP3 --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .mp3 file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'mp3',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToWAVCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMP3CommandID,
    @fileID
);

-- End Of ADD Normalization Path for .MP3 --

-- ADD Normalization Path for .WAV --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .wav file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'wav',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToWAVCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMP3CommandID,
    @fileID
);

-- End Of ADD Normalization Path for .WAV --

-- ADD Normalization Path for .WMA --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .wma file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'wma',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToWAVCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMP3CommandID,
    @fileID
);

-- End Of ADD Normalization Path for .WMA --

-- ADD Normalization Path for .M2V --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .m2v file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'm2v',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @ffmpegToWAVCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ffmpegToMP3CommandID,
    @fileID
);

-- End Of ADD Normalization Path for .M2V --



-- ADD Normalization Path for .AI --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .ai file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'ai',
    @fileID
);


INSERT INTO Commands 
    (commandType, command, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"convert\\"\\; version=\\"`convert -version | grep Version:`\\" program=\\"inkscape\\"\\; version=\\"`inkscape -V`\\" '),
    ('convert event detail')
);

set @transcoderAIToSVGsEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('# This file is part of Archivematica.\n
#\n
# Archivematica is free software: you can redistribute it and/or modify\n
# it under the terms of the GNU General Public License as published by\n
# the Free Software Foundation, either version 2 of the License, or\n
# (at your option) any later version.\n
#\n
# Archivematica is distributed in the hope that it will be useful,\n
# but WITHOUT ANY WARRANTY; without even the implied warranty of\n
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
# GNU General Public License for more details.\n
#\n
# You should have received a copy of the GNU General Public License\n
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.\n
\n
\n
# @package Archivematica\n
# @subpackage Ingest\n
# @author Joseph Perry <joseph@artefactual.com>\n
# @version svn: $Id$\n
\n
\n
set -e\n
\n
UUID=\"`uuid -v 4`\"\n
inputFile=\"%fileFullName%\"\n
mkdir \"%outputDirectory%%prefix%%fileName%%postfix%\"\n
\n
a=0\n
convert \"$inputFile\" /tmp/${UUID}.%d.ai\n
\n
for i in `find /tmp/${UUID}*`; do\n
    inkscape $i --export-plain-svg=\"%outputDirectory%%prefix%%fileName%%postfix%/%prefix%%fileName%.${a}%postfix%.svg\"\n
    a=$(( $a + 1 ))\n
done\n
\n
rm /tmp/${UUID}*\n'),
    '%outputDirectory%%prefix%%fileName%%postfix%',
    @transcoderAIToSVGsEventDetailCommandID,
    @standardDirectoryVerificationCommand,
    ('Transcoding to multiple svg files with convert and inkscape')
);
set @transcoderAIToSVGsCommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @transcoderAIToSVGsCommandID,
    @fileID
);


INSERT INTO Commands 
    (commandType, command, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"ps2pdf\\"\\; program=\\"Ghostscript\\"\\; version=\\"`gs --version`\\" '),
    ('convert event detail')
);
set @ps2pdfEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('ps2pdf "%fileFullName%" "%outputDirectory%%prefix%%fileName%%postfix%.pdf"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.pdf',
    @ps2pdfEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to pdf with ps2pdf')
);

set @ps2pdfAIToPDFCommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ps2pdfAIToPDFCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .AI --

-- ADD Normalization Path for .SVG --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .svg file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'svg',
    @fileID
);


INSERT INTO Commands 
    (commandType, command, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"inkscape\\"\\; version=\\"`inkscape -V`\\" '),
    ('inkscape event detail')
);
set @inkscapeEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('inkscape -z "%fileFullName%" --export-pdf="%outputDirectory%%prefix%%fileName%%postfix%.pdf"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.pdf',
    @inkscapeEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to pdf with inkscape')
);
set @inkscapeToPDFCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('inkscape "%fileFullName%" --export-plain-svg="%outputDirectory%%prefix%%fileName%%postfix%.svg"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.svg',
    @inkscapeEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to plain svg with inkscape')
);

set @inkscapeToPlainSVGCommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @inkscapeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @inkscapeToPlainSVGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .SVG --

-- ADD Normalization Path for .PDF --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .pdf file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'pdf',
    @fileID
);


INSERT INTO Commands 
    (commandType, command, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"Ghostscript\\"\\; version=\\"`gs --version`\\" '),
    ('Ghostscript event detail')
);
set @GhostscriptEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('sudo gs -dPDFA -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -dPDFACompatibilityPolicy=1 -sOutputFile="%outputDirectory%%prefix%%fileName%%postfix%.pdf" "%fileFullName%"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.pdf',
    @GhostscriptEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to pdfa with gs')
);
set @gsToPDFACommandID = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @gsToPDFACommandID,
    @fileID
);

-- End Of ADD Normalization Path for .PDF --

-- ADD Normalization Path for .EPS --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .eps file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'eps',
    @fileID
);


INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'command'),
    ('ps2pdf  -dEPSCrop -dPDFA "%fileFullName%" "%outputDirectory%%prefix%%fileName%%postfix%.pdf"'),
    '%outputDirectory%%prefix%%fileName%%postfix%.pdf',
    @ps2pdfEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to pdf with ps2pdf')
);

set @ps2pdfAIToPDFCommandID2 = LAST_INSERT_ID();

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @ps2pdfAIToPDFCommandID2,
    @fileID
);


INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @inkscapeToPlainSVGCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .EPS --

-- Normalization with open office commands

INSERT INTO Commands 
    (commandType, command, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('echo program=\\"openOffice\\"\\; version=\\"\\" '),
    ('inkscape event detail')
);
set @openOfficeEventDetailCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('# This file is part of Archivematica.\n
#\n
# Archivematica is free software: you can redistribute it and/or modify\n
# it under the terms of the GNU General Public License as published by\n
# the Free Software Foundation, either version 2 of the License, or\n
# (at your option) any later version.\n
#\n
# Archivematica is distributed in the hope that it will be useful,\n
# but WITHOUT ANY WARRANTY; without even the implied warranty of\n
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
# GNU General Public License for more details.\n
#\n
# You should have received a copy of the GNU General Public License\n
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.\n
\n
\n
# @package Archivematica\n
# @subpackage Ingest\n
# @author Joseph Perry <joseph@artefactual.com>\n
# @version svn: $Id$\n
\n
#%accessFormat% %fileFullName% %preservationFileDirectory%%fileTitle%.%accessFormat% %accessFileDirectory%\n
#\"%fileFullName%\" \"%outputDirectory%%prefix%%fileName%%postfix%.tif\"\n
\n
outputExtension=\"pdf\"\n
ddirname=\"`dirname \"%fileFullName%\"`\"\n
dbasename=\"`basename \"%fileFullName%\"`\"  \n
cd \"$ddirname\"\n
outputFile=\"%fileDirectory%%prefix%%fileName%%postfix%.${outputExtension}\"\n
\n
flock -x /var/lock/documentConversion.lock -c \"\\\"/usr/lib/transcoder/transcoderScripts/unoconvAlternativeSupport.sh\\\" \\\"/usr/lib/transcoder/transcoderScripts\\\" \\\"${dbasename}\\\" \\\"${outputFile}\\\"\" && mv \"${outputFile}\" \"%outputDirectory%\"\n
exit \"$?\"\n'),
    '%outputDirectory%%prefix%%fileName%%postfix%.pdf',
    @openOfficeEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to pdf with openOffice')
);
set @openOfficeToPDFCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('# This file is part of Archivematica.\n
#\n
# Archivematica is free software: you can redistribute it and/or modify\n
# it under the terms of the GNU General Public License as published by\n
# the Free Software Foundation, either version 2 of the License, or\n
# (at your option) any later version.\n
#\n
# Archivematica is distributed in the hope that it will be useful,\n
# but WITHOUT ANY WARRANTY; without even the implied warranty of\n
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
# GNU General Public License for more details.\n
#\n
# You should have received a copy of the GNU General Public License\n
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.\n
\n
\n
# @package Archivematica\n
# @subpackage Ingest\n
# @author Joseph Perry <joseph@artefactual.com>\n
# @version svn: $Id$\n
\n
#%accessFormat% %fileFullName% %preservationFileDirectory%%fileTitle%.%accessFormat% %accessFileDirectory%\n
#\"%fileFullName%\" \"%outputDirectory%%prefix%%fileName%%postfix%.tif\"\n
\n
outputExtension=\"odt\"\n
ddirname=\"`dirname \"%fileFullName%\"`\"\n
dbasename=\"`basename \"%fileFullName%\"`\"  \n
cd \"$ddirname\"\n
outputFile=\"%fileDirectory%%prefix%%fileName%%postfix%.${outputExtension}\"\n
\n
flock -x /var/lock/documentConversion.lock -c \"\\\"/usr/lib/transcoder/transcoderScripts/unoconvAlternativeSupport.sh\\\" \\\"/usr/lib/transcoder/transcoderScripts\\\" \\\"${dbasename}\\\" \\\"${outputFile}\\\"\"\n
exit \"$?\"\n'),
    '%outputDirectory%%prefix%%fileName%%postfix%.odt',
    @openOfficeEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to ODT with openOffice')
);
set @openOfficeToODTCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('# This file is part of Archivematica.\n
#\n
# Archivematica is free software: you can redistribute it and/or modify\n
# it under the terms of the GNU General Public License as published by\n
# the Free Software Foundation, either version 2 of the License, or\n
# (at your option) any later version.\n
#\n
# Archivematica is distributed in the hope that it will be useful,\n
# but WITHOUT ANY WARRANTY; without even the implied warranty of\n
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
# GNU General Public License for more details.\n
#\n
# You should have received a copy of the GNU General Public License\n
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.\n
\n
\n
# @package Archivematica\n
# @subpackage Ingest\n
# @author Joseph Perry <joseph@artefactual.com>\n
# @version svn: $Id$\n
\n
#%accessFormat% %fileFullName% %preservationFileDirectory%%fileTitle%.%accessFormat% %accessFileDirectory%\n
#\"%fileFullName%\" \"%outputDirectory%%prefix%%fileName%%postfix%.tif\"\n
\n
outputExtension=\"odp\"\n
ddirname=\"`dirname \"%fileFullName%\"`\"\n
dbasename=\"`basename \"%fileFullName%\"`\"  \n
cd \"$ddirname\"\n
outputFile=\"%fileDirectory%%prefix%%fileName%%postfix%.${outputExtension}\"\n
\n
flock -x /var/lock/documentConversion.lock -c \"\\\"/usr/lib/transcoder/transcoderScripts/unoconvAlternativeSupport.sh\\\" \\\"/usr/lib/transcoder/transcoderScripts\\\" \\\"${dbasename}\\\" \\\"${outputFile}\\\"\"\n
exit \"$?\"\n'),
    '%outputDirectory%%prefix%%fileName%%postfix%.odp',
    @openOfficeEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to ODP with openOffice')
);
set @openOfficeToODPCommandID = LAST_INSERT_ID();

INSERT INTO Commands 
    (commandType, command, outputLocation, eventDetailCommand, verificationCommand, description) 
    VALUES (
    (SELECT pk FROM CommandTypes WHERE type = 'bashScript'),
    ('# This file is part of Archivematica.\n
#\n
# Archivematica is free software: you can redistribute it and/or modify\n
# it under the terms of the GNU General Public License as published by\n
# the Free Software Foundation, either version 2 of the License, or\n
# (at your option) any later version.\n
#\n
# Archivematica is distributed in the hope that it will be useful,\n
# but WITHOUT ANY WARRANTY; without even the implied warranty of\n
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
# GNU General Public License for more details.\n
#\n
# You should have received a copy of the GNU General Public License\n
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.\n
\n
\n
# @package Archivematica\n
# @subpackage Ingest\n
# @author Joseph Perry <joseph@artefactual.com>\n
# @version svn: $Id$\n
\n
#%accessFormat% %fileFullName% %preservationFileDirectory%%fileTitle%.%accessFormat% %accessFileDirectory%\n
#\"%fileFullName%\" \"%outputDirectory%%prefix%%fileName%%postfix%.tif\"\n
\n
outputExtension=\"ods\"\n
ddirname=\"`dirname \"%fileFullName%\"`\"\n
dbasename=\"`basename \"%fileFullName%\"`\"  \n
cd \"$ddirname\"\n
outputFile=\"%fileDirectory%%prefix%%fileName%%postfix%.${outputExtension}\"\n
\n
flock -x /var/lock/documentConversion.lock -c \"\\\"/usr/lib/transcoder/transcoderScripts/unoconvAlternativeSupport.sh\\\" \\\"/usr/lib/transcoder/transcoderScripts\\\" \\\"${dbasename}\\\" \\\"${outputFile}\\\"\"\n
exit \"$?\"\n'),
    '%outputDirectory%%prefix%%fileName%%postfix%.ods',
    @openOfficeEventDetailCommandID,
    @standardVerificationCommand,
    ('Transcoding to ODS with openOffice')
);
set @openOfficeToODSCommandID = LAST_INSERT_ID();


-- END Normalization with open office commands

-- ADD Normalization Path for .DOC --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .doc file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'doc',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODTCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .DOC --

-- ADD Normalization Path for .WBK --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .wbk file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'wbk',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODTCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .WBK --

-- ADD Normalization Path for .WBK --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .wbk file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'wbk',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODTCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .WBK --


-- ADD Normalization Path for .WPD --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .wpd file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'wpd',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODTCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .WPD --

-- ADD Normalization Path for .RTF --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .rtf file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'rtf',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODTCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .RTF --

-- ADD Normalization Path for .DOCX --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .docx file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'docx',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .DOCX --

-- ADD Normalization Path for .PPTX --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .pptx file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'pptx',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .PPTX --

-- ADD Normalization Path for .PPT --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .ppt file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'ppt',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODPCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .PPT --

-- ADD Normalization Path for .XLS --
INSERT INTO FileIDs 
    (description)
    VALUES (
    'A .xls file'
);
set @fileID = LAST_INSERT_ID();

INSERT INTO FileIDsByExtension 
    (Extension, FileIDs)
    VALUES (
    'xls',
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'access'),
    @openOfficeToPDFCommandID,
    @fileID
);

INSERT INTO CommandRelationships 
    (commandClassification, command, fileID)
    VALUES (
    (SELECT pk FROM CommandClassifications WHERE classification = 'normalize'),
    @openOfficeToODSCommandID,
    @fileID
);

-- End Of ADD Normalization Path for .XLS --

