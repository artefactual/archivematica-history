#!/bin/bash

# This file is part of Archivematica.
#
# Copyright 2010-2012 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @author Joseph Perry <joseph@artefactual.com>
# @version svn: $Id$

cd `dirname $0`

fn_exists()
{
  type $1 2>/dev/null | grep -q 'is a function'
}

colour () { "$@" 2>&1>&3|sed 's,.*,\x1B[31m&\x1B[0m,'>&2;} 3>&1

function svn-update() {
  part="svn up"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
      echo "doing ${part} ..."
      echo "cleaning up..."
      cd localDevSetup/
      colour ./cleanup.sh
      cd ..

      echo "UPDATING..."
      svn update

      echo "integrating into environment..."
      cd localDevSetup/
      colour ./createLocalDevDirectories.sh
      cd ..
  else
          echo "not going to ${part}"
  fi
}

function package-update() {
  part="update/install package requirements"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          cd localDevSetup/
          colour sudo apt-get update
          colour ./installDependsFromDebianFile.py ./../src/archivematicaCommon/debian/control
          colour ./installDependsFromDebianFile.py ./../src/createDublinCore/debian/control
          colour ./installDependsFromDebianFile.py ./../src/dashboard/debian/control
          #./installDependsFromDebianFile.py ./../src/easy-extract/debian/control
          colour ./installDependsFromDebianFile.py ./../src/MCPClient/debian/control
          colour ./installDependsFromDebianFile.py ./../src/MCPrpcCLI/debian/control
          colour ./installDependsFromDebianFile.py ./../src/MCPServer/debian/control
          colour #./installDependsFromDebianFile.py ./../src/metaPackage-forensic-tools/debian/control
          colour #./installDependsFromDebianFile.py ./../src/metaPackage-shotgun/debian/control
          colour ./installDependsFromDebianFile.py ./../src/sanitizeNames/debian/control
          colour ./installDependsFromDebianFile.py ./../src/SIPCreationTools/debian/control
          colour ./installDependsFromDebianFile.py ./../src/transcoder/debian/control
          colour ./installDependsFromDebianFile.py ./../src/upload-qubit/debian/control
          colour #./installDependsFromDebianFile.py ./../src/vm-includes/debian/control
          colour ./installDependsFromDebianFile.py ./../src/xubuntuGuiScriptsEditor/debian/control
          cd ..
  else
          echo "Not going to ${part}."
  fi
}

function recreate-db() {
  part="recreate the databases"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          cd localDevSetup/
          sudo stop archivematica-mcp-server
          colour ./recreateDB.sh
          cd ..
  else
          echo "Not going to ${part}."
  fi
}

function restart() {
  part="restart archivematica services"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          sudo stop archivematica-mcp-server
          sleep 1
          sudo stop archivematica-mcp-client
          sleep 1
          sudo kill -9 `cat /tmp/archivematicaMCPServerPID`

          sleep 3
          sudo rm /tmp/archivematicaMCP*
          colour sudo start archivematica-mcp-server
          colour sudo start archivematica-mcp-client
          colour sudo apache2ctl restart
  else
          echo "Not going to ${part}."
  fi
}

function export-sampledata() {
  part="export sample data to ~/sampledata"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          rev="`svn info | grep \"Revision: \" | awk -F " " '{print $2}'`"
          echo Going to export to '~/'sampledata-$rev ...
          colour svn export sampledata ~/sampledata-${rev}
  else
          echo "Not going to ${part}."
  fi
}

function install-gui() {
  part="re-create gui-scripts editor file"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          rm /home/$USER/.config/Thunar/uca.xml
          tmp="`pwd`"
          cd src/xubuntuGuiScriptsEditor/share
          colour ./addArchivematicaGUIScripts.sh
          cd "$tmp"
  else
          echo "Not going to ${part}."
  fi
}

function update-qubit() {
  part="update Qubit (trunk) and restart its qubit-sword service"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          sudo chmod -R 777 qubit-svn
          colour svn update qubit-svn
          sudo chmod -R 777 qubit-svn
          sudo stop qubit-sword
          sudo start qubit-sword
          echo "Remember to activate sfSwordPlugin and restart Qubit database if necessary!"
  else
          echo "Not going to ${part}."
  fi
}

function example() {
  part="example"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
  else
          echo "Not going to ${part}"
  fi
}

# Run only one function if given
if [ ! -z ${1} ]; then
  ${1}
  exit
fi

svn-update
package-update
recreate-db
restart
export-sampledata
install-gui
update-qubit
